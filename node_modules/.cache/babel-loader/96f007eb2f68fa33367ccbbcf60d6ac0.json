{"ast":null,"code":"import _defineProperty from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable */import React,{useEffect,useState,useRef}from\"react\";import styles from\"./App.module.css\";import Graph from\"./Graph\";import LineChart from\"./LineChart\";import SimulationSettings from\"./SimulationSettings\";import{SICK,RECOVERED,DEAD}from\"./constants\";import{useInterval,randomChoice}from\"./utils\";import{nextSimulationTick,getInitialGraph}from\"./simulation\";var INITIAL_SIMULATION_STATE={tick:0,agentsPerHouse:8,houses:26,busStations:5,hospitals:3,supermarkets:5,schools:3,initialSickAgents:5};var INITIAL_GRAPH=getInitialGraph(INITIAL_SIMULATION_STATE);function App(){var _useState=useState(INITIAL_SIMULATION_STATE),_useState2=_slicedToArray(_useState,2),simulationState=_useState2[0],setSimulationState=_useState2[1];var _useState3=useState(INITIAL_GRAPH.nodes),_useState4=_slicedToArray(_useState3,2),nodes=_useState4[0],setNodes=_useState4[1];var _useState5=useState(INITIAL_GRAPH.edges),_useState6=_slicedToArray(_useState5,2),edges=_useState6[0],setEdges=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),historicalSickCount=_useState8[0],setHistoricalSickCount=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),historicalRecoveredCount=_useState10[0],setHistoricalRecoveredCount=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),historicalDeadCount=_useState12[0],setHistoricalDeadCount=_useState12[1];var _useState13=useState(true),_useState14=_slicedToArray(_useState13,2),loading=_useState14[0],setLoading=_useState14[1];var graphRef=useRef(null);useInterval(function(){if(loading){return;}var _nextSimulationTick=nextSimulationTick(simulationState,nodes,edges),_nodes=_nextSimulationTick.nodes,_edges=_nextSimulationTick.edges,state=_nextSimulationTick.state;setSimulationState(state);setHistoricalSickCount(historicalSickCount.concat(nodes.filter(function(_ref){var state=_ref.state;return state===SICK;}).length));setHistoricalRecoveredCount(historicalRecoveredCount.concat(nodes.filter(function(_ref2){var state=_ref2.state;return state===RECOVERED;}).length));setHistoricalDeadCount(historicalDeadCount.concat(nodes.filter(function(_ref3){var state=_ref3.state;return state===DEAD;}).length));},1000);useEffect(function(){setLoading(false);},[loading]);var onNodeClick=function onNodeClick(nodeId){return function(){var node=nodes.find(function(_ref4){var id=_ref4.id;return nodeId===id;});if(node.type!==\"venue\"){return;}node.locked=!node.locked;};};var onSettingChange=function onSettingChange(key){return function(event){setSimulationState(_objectSpread({},simulationState,_defineProperty({},key,event.target.value)));};};var onRestartButtonClick=function onRestartButtonClick(){var _getInitialGraph=getInitialGraph(simulationState),nodes=_getInitialGraph.nodes,edges=_getInitialGraph.edges;setLoading(true);setNodes(nodes);setEdges(edges);setHistoricalDeadCount([]);setHistoricalRecoveredCount([]);setHistoricalSickCount([]);setSimulationState(_objectSpread({},simulationState,{tick:0}));};return/*#__PURE__*/React.createElement(\"div\",{className:styles.container},/*#__PURE__*/React.createElement(\"div\",{className:styles.header},/*#__PURE__*/React.createElement(\"h3\",null,\"dgobog: Simulating Coronavirus Escalation with the Application of SIR Modeling\"),/*#__PURE__*/React.createElement(\"h2\",null,\"A virtualized experiment to analyze the spread of a pathogen over a modeled community\")),/*#__PURE__*/React.createElement(\"div\",{className:styles.simulation},/*#__PURE__*/React.createElement(\"div\",{className:styles.samples},/*#__PURE__*/React.createElement(\"span\",{className:styles.sampleSusceptible},\"Susceptible\"),/*#__PURE__*/React.createElement(\"span\",{className:styles.sampleInfected},\"Infected\"),/*#__PURE__*/React.createElement(\"span\",{className:styles.sampleRecovered},\"Recovered\"),/*#__PURE__*/React.createElement(\"i\",null,\"Click on a building to qurantine\")),!loading&&/*#__PURE__*/React.createElement(Graph,{width:Math.round(nodes.filter(function(_ref5){var type=_ref5.type;return type===\"venue\";}).length/6)*110,height:700,tick:simulationState.tick,nodes:nodes,edges:edges,onNodeClick:onNodeClick,ref:graphRef})),/*#__PURE__*/React.createElement(\"div\",{className:styles.section},/*#__PURE__*/React.createElement(\"div\",{className:styles.stats},/*#__PURE__*/React.createElement(\"h3\",null,\"Stats\"),/*#__PURE__*/React.createElement(\"div\",{className:styles.population},\"Population: \",nodes.filter(function(_ref6){var type=_ref6.type;return type===\"agent\";}).length,\" \",/*#__PURE__*/React.createElement(\"br\",null),\"Dead: \",nodes.filter(function(_ref7){var state=_ref7.state;return state===DEAD;}).length,\" \",/*#__PURE__*/React.createElement(\"br\",null),\"Recovered: \",nodes.filter(function(_ref8){var state=_ref8.state;return state===RECOVERED;}).length,\" \",/*#__PURE__*/React.createElement(\"br\",null),\"Sick: \",nodes.filter(function(_ref9){var state=_ref9.state;return state===SICK;}).length,\" \",/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(LineChart,{width:300,height:270,data:[{color:\"red\",points:historicalSickCount},{color:\"green\",points:historicalRecoveredCount},{color:\"black\",points:historicalDeadCount}]})),/*#__PURE__*/React.createElement(\"div\",{className:styles.simulationSettings},/*#__PURE__*/React.createElement(\"h3\",null,\"Settings\"),/*#__PURE__*/React.createElement(SimulationSettings,{simulationState:simulationState,onSettingChange:onSettingChange,onRestartButtonClick:onRestartButtonClick}))),/*#__PURE__*/React.createElement(\"div\",{className:styles.pageInfo},/*#__PURE__*/React.createElement(\"div\",{className:styles.section},/*#__PURE__*/React.createElement(\"h1\",null,\"Docs\"),/*#__PURE__*/React.createElement(\"p\",null,\"These elements are modifiable by the user to further specify circumstanital conditions: \"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Initial sick agents: number of intial sick people (randomly dispersed through homes)\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"li\",null,\"Agents per building: number of people per home\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"li\",null,\"Houses: number of houses\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"li\",null,\"Bus stations: number of bus stations\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"li\",null,\"Hospitals: number of hospitals\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"li\",null,\"Supermarkets: number of supermarkets\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"li\",null,\"Schools: number of schools\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Regions\"),/*#__PURE__*/React.createElement(\"p\",null,\"Each region has distinctive characteristics extracted from the region's respective Demographic Transition Model (DTM). Elements are scaled logarithimically for simulation and SIR modeling while factoring modified user input.\"),/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/react-coronasim/na/\"},\"North America (NA)\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/react-coronasim/sa/\"},\"South America (SA)\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/react-coronasim/eu/\"},\"Europe (EU)\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/react-coronasim/as/\"},\"Asia (AS)\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/react-coronasim/af/\"},\"Africa (AF)\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"/react-coronasim/oc/\"},\"Oceania (OC)\"))),/*#__PURE__*/React.createElement(\"br\",null))));}export default App;","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/src/App.js"],"names":["React","useEffect","useState","useRef","styles","Graph","LineChart","SimulationSettings","SICK","RECOVERED","DEAD","useInterval","randomChoice","nextSimulationTick","getInitialGraph","INITIAL_SIMULATION_STATE","tick","agentsPerHouse","houses","busStations","hospitals","supermarkets","schools","initialSickAgents","INITIAL_GRAPH","App","simulationState","setSimulationState","nodes","setNodes","edges","setEdges","historicalSickCount","setHistoricalSickCount","historicalRecoveredCount","setHistoricalRecoveredCount","historicalDeadCount","setHistoricalDeadCount","loading","setLoading","graphRef","_nodes","_edges","state","concat","filter","length","onNodeClick","nodeId","node","find","id","type","locked","onSettingChange","key","event","target","value","onRestartButtonClick","container","header","simulation","samples","sampleSusceptible","sampleInfected","sampleRecovered","Math","round","section","stats","population","color","points","simulationSettings","pageInfo"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useEffect, useState, useRef } from \"react\";\n\nimport styles from \"./App.module.css\";\nimport Graph from \"./Graph\";\nimport LineChart from \"./LineChart\";\nimport SimulationSettings from \"./SimulationSettings\";\nimport { SICK, RECOVERED, DEAD } from \"./constants\";\nimport { useInterval, randomChoice } from \"./utils\";\nimport { nextSimulationTick, getInitialGraph } from \"./simulation\";\n\nconst INITIAL_SIMULATION_STATE = {\n  tick: 0,\n  agentsPerHouse: 8,\n  houses: 26,\n  busStations: 5,\n  hospitals: 3,\n  supermarkets: 5,\n  schools: 3,\n  initialSickAgents: 5,\n};\n\nconst INITIAL_GRAPH = getInitialGraph(INITIAL_SIMULATION_STATE);\n\nfunction App() {\n  const [simulationState, setSimulationState] = useState(\n    INITIAL_SIMULATION_STATE\n  );\n  const [nodes, setNodes] = useState(INITIAL_GRAPH.nodes);\n  const [edges, setEdges] = useState(INITIAL_GRAPH.edges);\n  const [historicalSickCount, setHistoricalSickCount] = useState([]);\n  const [historicalRecoveredCount, setHistoricalRecoveredCount] = useState([]);\n  const [historicalDeadCount, setHistoricalDeadCount] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const graphRef = useRef(null);\n\n  useInterval(() => {\n    if (loading) {\n      return;\n    }\n\n    const { nodes: _nodes, edges: _edges, state } = nextSimulationTick(\n      simulationState,\n      nodes,\n      edges\n    );\n\n    setSimulationState(state);\n\n    setHistoricalSickCount(\n      historicalSickCount.concat(\n        nodes.filter(({ state }) => state === SICK).length\n      )\n    );\n\n    setHistoricalRecoveredCount(\n      historicalRecoveredCount.concat(\n        nodes.filter(({ state }) => state === RECOVERED).length\n      )\n    );\n\n    setHistoricalDeadCount(\n      historicalDeadCount.concat(\n        nodes.filter(({ state }) => state === DEAD).length\n      )\n    );\n  }, 1000);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [loading]);\n\n  const onNodeClick = (nodeId) => {\n    return () => {\n      const node = nodes.find(({ id }) => nodeId === id);\n      if (node.type !== \"venue\") {\n        return;\n      }\n      node.locked = !node.locked;\n    };\n  };\n\n  const onSettingChange = (key) => (event) => {\n    setSimulationState({ ...simulationState, [key]: event.target.value });\n  };\n\n  const onRestartButtonClick = () => {\n    const { nodes, edges } = getInitialGraph(simulationState);\n    setLoading(true);\n    setNodes(nodes);\n    setEdges(edges);\n    setHistoricalDeadCount([]);\n    setHistoricalRecoveredCount([]);\n    setHistoricalSickCount([]);\n    setSimulationState({ ...simulationState, tick: 0 });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <h3>dgobog: Simulating Coronavirus Escalation with the Application of SIR Modeling</h3>\n        <h2>A virtualized experiment to analyze the spread of a pathogen over a modeled community</h2>\n      </div>\n      <div className={styles.simulation}>\n        <div className={styles.samples}>\n          <span className={styles.sampleSusceptible}>Susceptible</span>\n          <span className={styles.sampleInfected}>Infected</span>\n          <span className={styles.sampleRecovered}>Recovered</span>\n          <i>Click on a building to qurantine</i>\n        </div>\n        {!loading && (\n          <Graph\n            width={\n              Math.round(\n                nodes.filter(({ type }) => type === \"venue\").length / 6\n              ) * 110\n            }\n            height={700}\n            tick={simulationState.tick}\n            nodes={nodes}\n            edges={edges}\n            onNodeClick={onNodeClick}\n            ref={graphRef}\n          />\n        )}\n      </div>\n      <div className={styles.section}>\n        <div className={styles.stats}>\n          <h3>Stats</h3>\n          <div className={styles.population}>\n            Population: {nodes.filter(({ type }) => type === \"agent\").length}{\" \"}\n            <br />\n            Dead: {nodes.filter(({ state }) => state === DEAD).length} <br />\n            Recovered: {\n              nodes.filter(({ state }) => state === RECOVERED).length\n            }{\" \"}\n            <br />\n            Sick: {nodes.filter(({ state }) => state === SICK).length} <br />\n          </div>\n          <LineChart\n            width={300}\n            height={270}\n            data={[\n              { color: \"red\", points: historicalSickCount },\n              { color: \"green\", points: historicalRecoveredCount },\n              { color: \"black\", points: historicalDeadCount },\n            ]}\n          />\n        </div>\n        <div className={styles.simulationSettings}>\n          <h3>Settings</h3>\n          <SimulationSettings\n            simulationState={simulationState}\n            onSettingChange={onSettingChange}\n            onRestartButtonClick={onRestartButtonClick}\n          />\n        </div>\n\n      </div>\n      <div className={styles.pageInfo}>\n        <div className={styles.section}>\n          <h1>Docs</h1>\n          <p>These elements are modifiable by the user to further specify circumstanital conditions: </p>\n          <ul>\n            <li>\n                Initial sick agents: number of intial sick people (randomly dispersed through homes)\n            </li>\n            <br/>\n            <li>\n                Agents per building: number of people per home\n            </li>\n            <br/>\n            <li>\n                Houses: number of houses\n            </li>\n            <br/>\n            <li>\n                Bus stations: number of bus stations\n            </li>\n            <br/>\n            <li>\n                Hospitals: number of hospitals\n            </li>\n            <br/>\n            <li>\n                Supermarkets: number of supermarkets\n            </li>\n            <br/>\n            <li>\n                Schools: number of schools\n            </li>\n          </ul>\n          <h2>Regions</h2>\n          <p>\n            Each region has distinctive characteristics extracted from the region's respective Demographic Transition Model (DTM). Elements are scaled logarithimically for simulation and SIR modeling while factoring modified user input.\n          </p>\n          <ul>\n            <li>\n              <a href=\"/react-coronasim/na/\">\n                North America (NA)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/sa/\">\n                South America (SA)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/eu/\">\n                Europe (EU)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/as/\">\n                Asia (AS)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/af/\">\n                Africa (AF)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/oc/\">\n                Oceania (OC)\n              </a>\n            </li>\n          </ul>\n          <br/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}