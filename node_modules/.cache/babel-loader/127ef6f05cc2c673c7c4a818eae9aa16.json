{"ast":null,"code":"import { shuffle } from '../utils';\nexport function applyFixedNodeGrid(nodes, height = 600) {\n  shuffle(nodes);\n  const gridSize = 100;\n  const nodesToAlign = nodes.filter(({\n    type\n  }) => type === 'venue');\n  const count = nodesToAlign.length;\n\n  for (var i = 0; i < count; i++) {\n    const node = nodesToAlign[i];\n    const row = Math.floor(i / (height / gridSize)) + 1;\n    const col = Math.floor(i % (height / gridSize)) + 1;\n    const fx = row * gridSize;\n    const fy = col * gridSize;\n    node.fx = fx;\n    node.fy = fy;\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/react-coronasim/src/simulation/grid.js"],"names":["shuffle","applyFixedNodeGrid","nodes","height","gridSize","nodesToAlign","filter","type","count","length","i","node","row","Math","floor","col","fx","fy"],"mappings":"AAAA,SAASA,OAAT,QAAwB,UAAxB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAM,GAAC,GAA1C,EAA+C;AACpDH,EAAAA,OAAO,CAACE,KAAD,CAAP;AAEA,QAAME,QAAQ,GAAG,GAAjB;AACA,QAAMC,YAAY,GAAGH,KAAK,CAACI,MAAN,CAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAAI,KAAK,OAApC,CAArB;AACA,QAAMC,KAAK,GAAGH,YAAY,CAACI,MAA3B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;AAC9B,UAAMC,IAAI,GAAGN,YAAY,CAACK,CAAD,CAAzB;AAEA,UAAME,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,IAAIP,MAAM,GAAGC,QAAb,CAAZ,IAAsC,CAAlD;AACA,UAAMW,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAWJ,CAAC,IAAKP,MAAD,GAAWC,QAAf,CAAZ,IAAwC,CAApD;AAEA,UAAMY,EAAE,GAAGJ,GAAG,GAAGR,QAAjB;AACA,UAAMa,EAAE,GAAGF,GAAG,GAAGX,QAAjB;AAEAO,IAAAA,IAAI,CAACK,EAAL,GAAUA,EAAV;AACAL,IAAAA,IAAI,CAACM,EAAL,GAAUA,EAAV;AACD;;AAED,SAAOf,KAAP;AACD","sourcesContent":["import { shuffle } from '../utils';\n\nexport function applyFixedNodeGrid(nodes, height=600) {\n  shuffle(nodes);\n\n  const gridSize = 100;\n  const nodesToAlign = nodes.filter(({ type }) => type === 'venue');\n  const count = nodesToAlign.length;\n  \n  for (var i = 0; i < count; i++) {\n    const node = nodesToAlign[i];\n\n    const row = Math.floor(i / (height / gridSize)) + 1;\n    const col = Math.floor(i % ((height) / gridSize)) + 1;\n    \n    const fx = row * gridSize;\n    const fy = col * gridSize;\n\n    node.fx = fx;\n    node.fy = fy;\n  }\n\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}