{"ast":null,"code":"var _jsxFileName = \"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/src/App.js\";\n\n/* eslint-disable */\nimport React, { useEffect, useState, useRef } from \"react\";\nimport styles from \"./App.module.css\";\nimport Graph from \"./Graph\";\nimport LineChart from \"./LineChart\";\nimport SimulationSettings from \"./SimulationSettings\";\nimport { SICK, RECOVERED, DEAD } from \"./constants\";\nimport { useInterval, randomChoice } from \"./utils\";\nimport { nextSimulationTick, getInitialGraph } from \"./simulation\";\nconst INITIAL_SIMULATION_STATE = {\n  tick: 0,\n  agentsPerHouse: 8,\n  houses: 26,\n  busStations: 5,\n  hospitals: 3,\n  supermarkets: 5,\n  schools: 3,\n  initialSickAgents: 5\n};\nconst INITIAL_GRAPH = getInitialGraph(INITIAL_SIMULATION_STATE);\n\nfunction App() {\n  const [simulationState, setSimulationState] = useState(INITIAL_SIMULATION_STATE);\n  const [nodes, setNodes] = useState(INITIAL_GRAPH.nodes);\n  const [edges, setEdges] = useState(INITIAL_GRAPH.edges);\n  const [historicalSickCount, setHistoricalSickCount] = useState([]);\n  const [historicalRecoveredCount, setHistoricalRecoveredCount] = useState([]);\n  const [historicalDeadCount, setHistoricalDeadCount] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const graphRef = useRef(null);\n  useInterval(() => {\n    if (loading) {\n      return;\n    }\n\n    const {\n      nodes: _nodes,\n      edges: _edges,\n      state\n    } = nextSimulationTick(simulationState, nodes, edges);\n    setSimulationState(state);\n    setHistoricalSickCount(historicalSickCount.concat(nodes.filter(({\n      state\n    }) => state === SICK).length));\n    setHistoricalRecoveredCount(historicalRecoveredCount.concat(nodes.filter(({\n      state\n    }) => state === RECOVERED).length));\n    setHistoricalDeadCount(historicalDeadCount.concat(nodes.filter(({\n      state\n    }) => state === DEAD).length));\n  }, 1000);\n  useEffect(() => {\n    setLoading(false);\n  }, [loading]);\n\n  const onNodeClick = nodeId => {\n    return () => {\n      const node = nodes.find(({\n        id\n      }) => nodeId === id);\n\n      if (node.type !== \"venue\") {\n        return;\n      }\n\n      node.locked = !node.locked;\n    };\n  };\n\n  const onSettingChange = key => event => {\n    setSimulationState({ ...simulationState,\n      [key]: event.target.value\n    });\n  };\n\n  const onRestartButtonClick = () => {\n    const {\n      nodes,\n      edges\n    } = getInitialGraph(simulationState);\n    setLoading(true);\n    setNodes(nodes);\n    setEdges(edges);\n    setHistoricalDeadCount([]);\n    setHistoricalRecoveredCount([]);\n    setHistoricalSickCount([]);\n    setSimulationState({ ...simulationState,\n      tick: 0\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"CoronaSim: Simulating Coronavirus Escalation with the Application of SIR Modeling\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"A virtualized experiment to analyze the spread of a pathogen over a modeled community\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.simulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.samples,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.sampleSusceptible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Susceptible\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.sampleInfected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Infected\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.sampleRecovered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Recovered\"), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Click on a building to qurantine\")), !loading && /*#__PURE__*/React.createElement(Graph, {\n    width: Math.round(nodes.filter(({\n      type\n    }) => type === \"venue\").length / 6) * 110,\n    height: 700,\n    tick: simulationState.tick,\n    nodes: nodes,\n    edges: edges,\n    onNodeClick: onNodeClick,\n    ref: graphRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.stats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"Stats\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.population,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, \"Population: \", nodes.filter(({\n    type\n  }) => type === \"agent\").length, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), \"Dead: \", nodes.filter(({\n    state\n  }) => state === DEAD).length, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 72\n    }\n  }), \"Recovered: \", nodes.filter(({\n    state\n  }) => state === RECOVERED).length, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), \"Sick: \", nodes.filter(({\n    state\n  }) => state === SICK).length, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 72\n    }\n  })), /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 270,\n    data: [{\n      color: \"red\",\n      points: historicalSickCount\n    }, {\n      color: \"green\",\n      points: historicalRecoveredCount\n    }, {\n      color: \"black\",\n      points: historicalDeadCount\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.simulationSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Settings\"), /*#__PURE__*/React.createElement(SimulationSettings, {\n    simulationState: simulationState,\n    onSettingChange: onSettingChange,\n    onRestartButtonClick: onRestartButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.pageInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Docs\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"These elements are modifiable by the user to further specify circumstanital conditions: \"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"Initial sick agents: number of intial sick people (randomly dispersed through homes)\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, \"Agents per building: number of people per building\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, \"Houses: number of houses\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Bus stations: number of bus stations\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, \"Hospitals: number of hospitals\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"Supermarkets: number of supermarkets\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, \"Schools: number of schools\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, \"Regions\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, \"Each region has distinctive characteristics extracted from the region's respective Demographic Transition Model (DTM). Elements are scaled logarithimically for simulation and SIR modeling while factoring modified user input.\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/NA/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, \"North America (NA)\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/SA/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, \"South America (SA)\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/EU/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, \"Europe (EU)\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/AS/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, \"Asia (AS)\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/AF/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, \"Africa (AF)\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/OC/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, \"Oceania (OC)\"))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/src/App.js"],"names":["React","useEffect","useState","useRef","styles","Graph","LineChart","SimulationSettings","SICK","RECOVERED","DEAD","useInterval","randomChoice","nextSimulationTick","getInitialGraph","INITIAL_SIMULATION_STATE","tick","agentsPerHouse","houses","busStations","hospitals","supermarkets","schools","initialSickAgents","INITIAL_GRAPH","App","simulationState","setSimulationState","nodes","setNodes","edges","setEdges","historicalSickCount","setHistoricalSickCount","historicalRecoveredCount","setHistoricalRecoveredCount","historicalDeadCount","setHistoricalDeadCount","loading","setLoading","graphRef","_nodes","_edges","state","concat","filter","length","onNodeClick","nodeId","node","find","id","type","locked","onSettingChange","key","event","target","value","onRestartButtonClick","container","header","simulation","samples","sampleSusceptible","sampleInfected","sampleRecovered","Math","round","section","stats","population","color","points","simulationSettings","pageInfo"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useEffect, useState, useRef } from \"react\";\n\nimport styles from \"./App.module.css\";\nimport Graph from \"./Graph\";\nimport LineChart from \"./LineChart\";\nimport SimulationSettings from \"./SimulationSettings\";\nimport { SICK, RECOVERED, DEAD } from \"./constants\";\nimport { useInterval, randomChoice } from \"./utils\";\nimport { nextSimulationTick, getInitialGraph } from \"./simulation\";\n\nconst INITIAL_SIMULATION_STATE = {\n  tick: 0,\n  agentsPerHouse: 8,\n  houses: 26,\n  busStations: 5,\n  hospitals: 3,\n  supermarkets: 5,\n  schools: 3,\n  initialSickAgents: 5,\n};\n\nconst INITIAL_GRAPH = getInitialGraph(INITIAL_SIMULATION_STATE);\n\nfunction App() {\n  const [simulationState, setSimulationState] = useState(\n    INITIAL_SIMULATION_STATE\n  );\n  const [nodes, setNodes] = useState(INITIAL_GRAPH.nodes);\n  const [edges, setEdges] = useState(INITIAL_GRAPH.edges);\n  const [historicalSickCount, setHistoricalSickCount] = useState([]);\n  const [historicalRecoveredCount, setHistoricalRecoveredCount] = useState([]);\n  const [historicalDeadCount, setHistoricalDeadCount] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const graphRef = useRef(null);\n\n  useInterval(() => {\n    if (loading) {\n      return;\n    }\n\n    const { nodes: _nodes, edges: _edges, state } = nextSimulationTick(\n      simulationState,\n      nodes,\n      edges\n    );\n\n    setSimulationState(state);\n\n    setHistoricalSickCount(\n      historicalSickCount.concat(\n        nodes.filter(({ state }) => state === SICK).length\n      )\n    );\n\n    setHistoricalRecoveredCount(\n      historicalRecoveredCount.concat(\n        nodes.filter(({ state }) => state === RECOVERED).length\n      )\n    );\n\n    setHistoricalDeadCount(\n      historicalDeadCount.concat(\n        nodes.filter(({ state }) => state === DEAD).length\n      )\n    );\n  }, 1000);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [loading]);\n\n  const onNodeClick = (nodeId) => {\n    return () => {\n      const node = nodes.find(({ id }) => nodeId === id);\n      if (node.type !== \"venue\") {\n        return;\n      }\n      node.locked = !node.locked;\n    };\n  };\n\n  const onSettingChange = (key) => (event) => {\n    setSimulationState({ ...simulationState, [key]: event.target.value });\n  };\n\n  const onRestartButtonClick = () => {\n    const { nodes, edges } = getInitialGraph(simulationState);\n    setLoading(true);\n    setNodes(nodes);\n    setEdges(edges);\n    setHistoricalDeadCount([]);\n    setHistoricalRecoveredCount([]);\n    setHistoricalSickCount([]);\n    setSimulationState({ ...simulationState, tick: 0 });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <h3>CoronaSim: Simulating Coronavirus Escalation with the Application of SIR Modeling</h3>\n        <h2>A virtualized experiment to analyze the spread of a pathogen over a modeled community</h2>\n      </div>\n      <div className={styles.simulation}>\n        <div className={styles.samples}>\n          <span className={styles.sampleSusceptible}>Susceptible</span>\n          <span className={styles.sampleInfected}>Infected</span>\n          <span className={styles.sampleRecovered}>Recovered</span>\n          <i>Click on a building to qurantine</i>\n        </div>\n        {!loading && (\n          <Graph\n            width={\n              Math.round(\n                nodes.filter(({ type }) => type === \"venue\").length / 6\n              ) * 110\n            }\n            height={700}\n            tick={simulationState.tick}\n            nodes={nodes}\n            edges={edges}\n            onNodeClick={onNodeClick}\n            ref={graphRef}\n          />\n        )}\n      </div>\n      <div className={styles.section}>\n        <div className={styles.stats}>\n          <h3>Stats</h3>\n          <div className={styles.population}>\n            Population: {nodes.filter(({ type }) => type === \"agent\").length}{\" \"}\n            <br />\n            Dead: {nodes.filter(({ state }) => state === DEAD).length} <br />\n            Recovered: {\n              nodes.filter(({ state }) => state === RECOVERED).length\n            }{\" \"}\n            <br />\n            Sick: {nodes.filter(({ state }) => state === SICK).length} <br />\n          </div>\n          <LineChart\n            width={300}\n            height={270}\n            data={[\n              { color: \"red\", points: historicalSickCount },\n              { color: \"green\", points: historicalRecoveredCount },\n              { color: \"black\", points: historicalDeadCount },\n            ]}\n          />\n        </div>\n        <div className={styles.simulationSettings}>\n          <h3>Settings</h3>\n          <SimulationSettings\n            simulationState={simulationState}\n            onSettingChange={onSettingChange}\n            onRestartButtonClick={onRestartButtonClick}\n          />\n        </div>\n\n      </div>\n      <div className={styles.pageInfo}>\n          <h1>Docs</h1>\n          <p>These elements are modifiable by the user to further specify circumstanital conditions: </p>\n          <ul>\n            <li>\n                Initial sick agents: number of intial sick people (randomly dispersed through homes)\n            </li>\n            <br/>\n            <li>\n                Agents per building: number of people per building\n            </li>\n            <br/>\n            <li>\n                Houses: number of houses\n            </li>\n            <br/>\n            <li>\n                Bus stations: number of bus stations\n            </li>\n            <br/>\n            <li>\n                Hospitals: number of hospitals\n            </li>\n            <br/>\n            <li>\n                Supermarkets: number of supermarkets\n            </li>\n            <br/>\n            <li>\n                Schools: number of schools\n            </li>\n          </ul>\n          <h2>Regions</h2>\n          <p>\n            Each region has distinctive characteristics extracted from the region's respective Demographic Transition Model (DTM). Elements are scaled logarithimically for simulation and SIR modeling while factoring modified user input.\n          </p>\n          <ul>\n            <li>\n              <a href=\"/NA/\">\n                North America (NA)\n              </a>\n            </li>\n            <li>\n              <a href=\"/SA/\">\n                South America (SA)\n              </a>\n            </li>\n            <li>\n              <a href=\"/EU/\">\n                Europe (EU)\n              </a>\n            </li>\n            <li>\n              <a href=\"/AS/\">\n                Asia (AS)\n              </a>\n            </li>\n            <li>\n              <a href=\"/AF/\">\n                Africa (AF)\n              </a>\n            </li>\n            <li>\n              <a href=\"/OC/\">\n                Oceania (OC)\n              </a>\n            </li>\n          </ul>\n          <br/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}