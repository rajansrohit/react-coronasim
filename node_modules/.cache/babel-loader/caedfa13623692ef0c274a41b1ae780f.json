{"ast":null,"code":"import _toConsumableArray from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from\"react\";import styles from\"./LineChart.module.css\";function buildPolyLineString(points,xMultipier,yMultipier,maxXEntries){return points.slice(Math.max(points.length-maxXEntries,0)).reduce(function(acc,current,i){return acc.concat(\"\".concat(i*xMultipier,\", \").concat(-(current*yMultipier)));},[]).join(\" \");}export default function LineChart(_ref){var width=_ref.width,height=_ref.height,_ref$xOffset=_ref.xOffset,xOffset=_ref$xOffset===void 0?10:_ref$xOffset,_ref$yOffset=_ref.yOffset,yOffset=_ref$yOffset===void 0?17:_ref$yOffset,_ref$data=_ref.data,data=_ref$data===void 0?[]:_ref$data,_ref$maxXEntries=_ref.maxXEntries,maxXEntries=_ref$maxXEntries===void 0?100:_ref$maxXEntries;var maxYPoint=height-50;var maxYRange=Math.max.apply(Math,[maxYPoint].concat(_toConsumableArray(data.reduce(function(prev,_ref2){var points=_ref2.points;return prev.concat(points);},[]))));var yMultipier=1;var xMultipier=2.5;var scaleY=maxYPoint/maxYRange;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"span\",{className:styles.labelY},\"Population \\u2192\"),/*#__PURE__*/React.createElement(\"svg\",{className:styles.lineChart,width:width,height:height},/*#__PURE__*/React.createElement(\"g\",{transform:\"scale(1, \".concat(scaleY,\"), translate(0, \").concat((height-30)/scaleY,\")\")},data.map(function(_ref3,i){var points=_ref3.points,color=_ref3.color;return/*#__PURE__*/React.createElement(\"g\",{key:\"line-\".concat(i),transform:\"translate(\".concat(xOffset+5,\", \").concat(yMultipier+yOffset,\")\")},/*#__PURE__*/React.createElement(\"polyline\",{points:buildPolyLineString(points,xMultipier,yMultipier,maxXEntries),stroke:color,fill:\"transparent\",strokeWidth:2}));}))),/*#__PURE__*/React.createElement(\"span\",{className:styles.labelX},\"Days since the first case \\u2192\"));}","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/src/LineChart.js"],"names":["React","styles","buildPolyLineString","points","xMultipier","yMultipier","maxXEntries","slice","Math","max","length","reduce","acc","current","i","concat","join","LineChart","width","height","xOffset","yOffset","data","maxYPoint","maxYRange","prev","scaleY","labelY","lineChart","map","color","labelX"],"mappings":"8LAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CAEA,QAASC,CAAAA,mBAAT,CAA6BC,MAA7B,CAAqCC,UAArC,CAAiDC,UAAjD,CAA6DC,WAA7D,CAA0E,CACxE,MAAOH,CAAAA,MAAM,CACVI,KADI,CACEC,IAAI,CAACC,GAAL,CAASN,MAAM,CAACO,MAAP,CAAgBJ,WAAzB,CAAsC,CAAtC,CADF,EAEJK,MAFI,CAEG,SAACC,GAAD,CAAMC,OAAN,CAAeC,CAAf,CAAqB,CAC3B,MAAOF,CAAAA,GAAG,CAACG,MAAJ,WAAcD,CAAC,CAAGV,UAAlB,cAAiC,EAAES,OAAO,CAAGR,UAAZ,CAAjC,EAAP,CACD,CAJI,CAIF,EAJE,EAKJW,IALI,CAKC,GALD,CAAP,CAMD,CAED,cAAe,SAASC,CAAAA,SAAT,MAOZ,IANDC,CAAAA,KAMC,MANDA,KAMC,CALDC,MAKC,MALDA,MAKC,mBAJDC,OAIC,CAJDA,OAIC,uBAJS,EAIT,gCAHDC,OAGC,CAHDA,OAGC,uBAHS,EAGT,6BAFDC,IAEC,CAFDA,IAEC,oBAFM,EAEN,iCADDhB,WACC,CADDA,WACC,2BADa,GACb,kBACD,GAAMiB,CAAAA,SAAS,CAAGJ,MAAM,CAAG,EAA3B,CACA,GAAMK,CAAAA,SAAS,CAAGhB,IAAI,CAACC,GAAL,OAAAD,IAAI,EACpBe,SADoB,4BAEjBD,IAAI,CAACX,MAAL,CAAY,SAACc,IAAD,WAAStB,CAAAA,MAAT,OAASA,MAAT,OAAsBsB,CAAAA,IAAI,CAACV,MAAL,CAAYZ,MAAZ,CAAtB,EAAZ,CAAuD,EAAvD,CAFiB,GAAtB,CAKA,GAAME,CAAAA,UAAU,CAAG,CAAnB,CACA,GAAMD,CAAAA,UAAU,CAAG,GAAnB,CACA,GAAMsB,CAAAA,MAAM,CAAGH,SAAS,CAAGC,SAA3B,CAEA,mBACE,qDACE,4BAAM,SAAS,CAAEvB,MAAM,CAAC0B,MAAxB,sBADF,cAEE,2BAAK,SAAS,CAAE1B,MAAM,CAAC2B,SAAvB,CAAkC,KAAK,CAAEV,KAAzC,CAAgD,MAAM,CAAEC,MAAxD,eACE,yBACE,SAAS,oBAAcO,MAAd,4BAAuC,CAACP,MAAM,CAAG,EAAV,EAC9CO,MADO,KADX,EAIGJ,IAAI,CAACO,GAAL,CAAS,eAAoBf,CAApB,KAAGX,CAAAA,MAAH,OAAGA,MAAH,CAAW2B,KAAX,OAAWA,KAAX,oBACR,yBACE,GAAG,gBAAUhB,CAAV,CADL,CAEE,SAAS,qBAAeM,OAAO,CAAG,CAAzB,cAA+Bf,UAAU,CAAGgB,OAA5C,KAFX,eAIE,gCACE,MAAM,CAAEnB,mBAAmB,CACzBC,MADyB,CAEzBC,UAFyB,CAGzBC,UAHyB,CAIzBC,WAJyB,CAD7B,CAOE,MAAM,CAAEwB,KAPV,CAQE,IAAI,CAAC,aARP,CASE,WAAW,CAAE,CATf,EAJF,CADQ,EAAT,CAJH,CADF,CAFF,cA2BE,4BAAM,SAAS,CAAE7B,MAAM,CAAC8B,MAAxB,qCA3BF,CADF,CA+BD","sourcesContent":["import React from \"react\";\n\nimport styles from \"./LineChart.module.css\";\n\nfunction buildPolyLineString(points, xMultipier, yMultipier, maxXEntries) {\n  return points\n    .slice(Math.max(points.length - maxXEntries, 0))\n    .reduce((acc, current, i) => {\n      return acc.concat(`${i * xMultipier}, ${-(current * yMultipier)}`);\n    }, [])\n    .join(\" \");\n}\n\nexport default function LineChart({\n  width,\n  height,\n  xOffset = 10,\n  yOffset = 17,\n  data = [],\n  maxXEntries = 100\n}) {\n  const maxYPoint = height - 50;\n  const maxYRange = Math.max(\n    maxYPoint,\n    ...data.reduce((prev, { points }) => prev.concat(points), [])\n  );\n\n  const yMultipier = 1;\n  const xMultipier = 2.5;\n  const scaleY = maxYPoint / maxYRange;\n\n  return (\n    <>\n      <span className={styles.labelY}>Population →</span>\n      <svg className={styles.lineChart} width={width} height={height}>\n        <g\n          transform={`scale(1, ${scaleY}), translate(0, ${(height - 30) /\n            scaleY})`}\n        >\n          {data.map(({ points, color }, i) => (\n            <g\n              key={`line-${i}`}\n              transform={`translate(${xOffset + 5}, ${yMultipier + yOffset})`}\n            >\n              <polyline\n                points={buildPolyLineString(\n                  points,\n                  xMultipier,\n                  yMultipier,\n                  maxXEntries\n                )}\n                stroke={color}\n                fill=\"transparent\"\n                strokeWidth={2}\n              />\n            </g>\n          ))}\n        </g>\n      </svg>\n      <span className={styles.labelX}>Days since the first case →</span>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}