{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _SIR_TRANSITION_STATE,_DISEASE_SPREAD_TRANS;import{SUSCEPTIBLE,SICK,RECOVERED,DEAD}from'../constants';import{randomChoice,weightedRandom}from'../utils';export var STAY='stay';export var BASE='base';var SIR_TRANSITION_STATE=(_SIR_TRANSITION_STATE={},_defineProperty(_SIR_TRANSITION_STATE,SUSCEPTIBLE,[[1,SUSCEPTIBLE]]),_defineProperty(_SIR_TRANSITION_STATE,RECOVERED,[[1,RECOVERED]]),_defineProperty(_SIR_TRANSITION_STATE,SICK,[[0.995,SICK],[0.004,RECOVERED],[0.001,DEAD]]),_defineProperty(_SIR_TRANSITION_STATE,DEAD,[[1,DEAD]]),_SIR_TRANSITION_STATE);var DISEASE_SPREAD_TRANSITION=(_DISEASE_SPREAD_TRANS={},_defineProperty(_DISEASE_SPREAD_TRANS,SUSCEPTIBLE,[[0.3,SICK],[0.7,SUSCEPTIBLE]]),_defineProperty(_DISEASE_SPREAD_TRANS,RECOVERED,[[1,RECOVERED]]),_defineProperty(_DISEASE_SPREAD_TRANS,SICK,[[1,SICK]]),_defineProperty(_DISEASE_SPREAD_TRANS,DEAD,[[1,DEAD]]),_DISEASE_SPREAD_TRANS);export function getNextMarkovStateForAgent(agent,transitionMap){var _agent$location$split=agent.location.split('-'),_agent$location$split2=_slicedToArray(_agent$location$split,1),agentLocation=_agent$location$split2[0];if(agentLocation==='house'&&Math.random()<0.9){return STAY;}var map=transitionMap[agentLocation];return randomChoice(map);}export function applySIRModel(nodes,edges){var _iterator=_createForOfIteratorHelper(nodes),_step;try{var _loop=function _loop(){var node=_step.value;if(node.type!=='agent'){return\"continue\";}var location=nodes.find(function(_ref){var id=_ref.id;return node.location===id;});var fellows=edges.filter(function(_ref2){var target=_ref2.target;return target.id===location.id;}).map(function(_ref3){var source=_ref3.source;return source;});fellows.forEach(function(fellow){if(fellow.id===node.id){return;}if(node.state===SICK){fellow.state=weightedRandom(DISEASE_SPREAD_TRANSITION[fellow.state]);}fellow.state=weightedRandom(SIR_TRANSITION_STATE[fellow.state]);});};for(_iterator.s();!(_step=_iterator.n()).done;){var _ret=_loop();if(_ret===\"continue\")continue;}}catch(err){_iterator.e(err);}finally{_iterator.f();}}","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/src/simulation/markov.js"],"names":["SUSCEPTIBLE","SICK","RECOVERED","DEAD","randomChoice","weightedRandom","STAY","BASE","SIR_TRANSITION_STATE","DISEASE_SPREAD_TRANSITION","getNextMarkovStateForAgent","agent","transitionMap","location","split","agentLocation","Math","random","map","applySIRModel","nodes","edges","node","type","find","id","fellows","filter","target","source","forEach","fellow","state"],"mappings":"4mBAAA,OACEA,WADF,CACeC,IADf,CACqBC,SADrB,CACgCC,IADhC,KAEO,cAFP,CAIA,OAASC,YAAT,CAAuBC,cAAvB,KAA6C,UAA7C,CAEA,MAAO,IAAMC,CAAAA,IAAI,CAAG,MAAb,CACP,MAAO,IAAMC,CAAAA,IAAI,CAAG,MAAb,CAEP,GAAMC,CAAAA,oBAAoB,iEACvBR,WADuB,CACT,CACb,CAAC,CAAD,CAAIA,WAAJ,CADa,CADS,wCAIvBE,SAJuB,CAIX,CACX,CAAC,CAAD,CAAIA,SAAJ,CADW,CAJW,wCAOvBD,IAPuB,CAOhB,CACN,CAAC,KAAD,CAAQA,IAAR,CADM,CAEN,CAAC,KAAD,CAAQC,SAAR,CAFM,CAGN,CAAC,KAAD,CAAQC,IAAR,CAHM,CAPgB,wCAYvBA,IAZuB,CAYhB,CACN,CAAC,CAAD,CAAIA,IAAJ,CADM,CAZgB,wBAA1B,CAiBA,GAAMM,CAAAA,yBAAyB,iEAC5BT,WAD4B,CACd,CACb,CAAC,GAAD,CAAMC,IAAN,CADa,CAEb,CAAC,GAAD,CAAMD,WAAN,CAFa,CADc,wCAK5BE,SAL4B,CAKhB,CACX,CAAC,CAAD,CAAIA,SAAJ,CADW,CALgB,wCAQ5BD,IAR4B,CAQrB,CACN,CAAC,CAAD,CAAIA,IAAJ,CADM,CARqB,wCAW5BE,IAX4B,CAWrB,CACN,CAAC,CAAD,CAAIA,IAAJ,CADM,CAXqB,wBAA/B,CAgBA,MAAO,SAASO,CAAAA,0BAAT,CAAoCC,KAApC,CAA2CC,aAA3C,CAA0D,2BACvCD,KAAK,CAACE,QAAN,CAAeC,KAAf,CAAqB,GAArB,CADuC,gEACxDC,aADwD,2BAG/D,GAAIA,aAAa,GAAK,OAAlB,EAA6BC,IAAI,CAACC,MAAL,GAAgB,GAAjD,CAAsD,CACpD,MAAOX,CAAAA,IAAP,CACD,CAED,GAAMY,CAAAA,GAAG,CAAGN,aAAa,CAACG,aAAD,CAAzB,CAEA,MAAOX,CAAAA,YAAY,CAACc,GAAD,CAAnB,CACD,CAED,MAAO,SAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8BC,KAA9B,CAAqC,0CACvBD,KADuB,0CAC/BE,CAAAA,IAD+B,aAExC,GAAIA,IAAI,CAACC,IAAL,GAAc,OAAlB,CAA2B,CACzB,iBACD,CAED,GAAMV,CAAAA,QAAQ,CAAGO,KAAK,CAACI,IAAN,CAAW,kBAAGC,CAAAA,EAAH,MAAGA,EAAH,OAAYH,CAAAA,IAAI,CAACT,QAAL,GAAkBY,EAA9B,EAAX,CAAjB,CACA,GAAMC,CAAAA,OAAO,CAAGL,KAAK,CAClBM,MADa,CACN,mBAAGC,CAAAA,MAAH,OAAGA,MAAH,OAAgBA,CAAAA,MAAM,CAACH,EAAP,GAAcZ,QAAQ,CAACY,EAAvC,EADM,EAEbP,GAFa,CAET,mBAAGW,CAAAA,MAAH,OAAGA,MAAH,OAAgBA,CAAAA,MAAhB,EAFS,CAAhB,CAIAH,OAAO,CAACI,OAAR,CACE,SAACC,MAAD,CAAY,CACV,GAAIA,MAAM,CAACN,EAAP,GAAcH,IAAI,CAACG,EAAvB,CAA2B,CACzB,OACD,CAED,GAAIH,IAAI,CAACU,KAAL,GAAe/B,IAAnB,CAAyB,CACvB8B,MAAM,CAACC,KAAP,CAAe3B,cAAc,CAACI,yBAAyB,CAACsB,MAAM,CAACC,KAAR,CAA1B,CAA7B,CACD,CAEDD,MAAM,CAACC,KAAP,CAAe3B,cAAc,CAACG,oBAAoB,CAACuB,MAAM,CAACC,KAAR,CAArB,CAA7B,CACD,CAXH,EAXwC,EAC1C,+CAA0B,uCAEtB,SAqBH,CAxByC,qDAyB3C","sourcesContent":["import {\n  SUSCEPTIBLE, SICK, RECOVERED, DEAD,\n} from '../constants';\n\nimport { randomChoice, weightedRandom } from '../utils';\n\nexport const STAY = 'stay';\nexport const BASE = 'base';\n\nconst SIR_TRANSITION_STATE = {\n  [SUSCEPTIBLE]: [\n    [1, SUSCEPTIBLE],\n  ],\n  [RECOVERED]: [\n    [1, RECOVERED],\n  ],\n  [SICK]: [\n    [0.995, SICK],\n    [0.004, RECOVERED],\n    [0.001, DEAD],\n  ],\n  [DEAD]: [\n    [1, DEAD],\n  ],\n};\n\nconst DISEASE_SPREAD_TRANSITION = {\n  [SUSCEPTIBLE]: [\n    [0.3, SICK],\n    [0.7, SUSCEPTIBLE],\n  ],\n  [RECOVERED]: [\n    [1, RECOVERED],\n  ],\n  [SICK]: [\n    [1, SICK],\n  ],\n  [DEAD]: [\n    [1, DEAD],\n  ],\n};\n\nexport function getNextMarkovStateForAgent(agent, transitionMap) {\n  const [agentLocation] = agent.location.split('-');\n\n  if (agentLocation === 'house' && Math.random() < 0.9) {\n    return STAY;\n  }\n\n  const map = transitionMap[agentLocation];\n\n  return randomChoice(map);\n}\n\nexport function applySIRModel(nodes, edges) {\n  for (const node of nodes) {\n    if (node.type !== 'agent') {\n      continue;\n    }\n\n    const location = nodes.find(({ id }) => node.location === id);\n    const fellows = edges\n      .filter(({ target }) => target.id === location.id)\n      .map(({ source }) => source);\n\n    fellows.forEach(\n      (fellow) => {\n        if (fellow.id === node.id) {\n          return;\n        }\n\n        if (node.state === SICK) {\n          fellow.state = weightedRandom(DISEASE_SPREAD_TRANSITION[fellow.state]);\n        }\n\n        fellow.state = weightedRandom(SIR_TRANSITION_STATE[fellow.state]);\n      }\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}