{"ast":null,"code":"import{shuffle}from'../utils';export function applyFixedNodeGrid(nodes){var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:600;shuffle(nodes);var gridSize=100;var nodesToAlign=nodes.filter(function(_ref){var type=_ref.type;return type==='venue';});var count=nodesToAlign.length;for(var i=0;i<count;i++){var node=nodesToAlign[i];var row=Math.floor(i/(height/gridSize))+1;var col=Math.floor(i%(height/gridSize))+1;var fx=row*gridSize;var fy=col*gridSize;node.fx=fx;node.fy=fy;}return nodes;}","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/src/simulation/grid.js"],"names":["shuffle","applyFixedNodeGrid","nodes","height","gridSize","nodesToAlign","filter","type","count","length","i","node","row","Math","floor","col","fx","fy"],"mappings":"AAAA,OAASA,OAAT,KAAwB,UAAxB,CAEA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAA+C,IAAZC,CAAAA,MAAY,2DAAL,GAAK,CACpDH,OAAO,CAACE,KAAD,CAAP,CAEA,GAAME,CAAAA,QAAQ,CAAG,GAAjB,CACA,GAAMC,CAAAA,YAAY,CAAGH,KAAK,CAACI,MAAN,CAAa,kBAAGC,CAAAA,IAAH,MAAGA,IAAH,OAAcA,CAAAA,IAAI,GAAK,OAAvB,EAAb,CAArB,CACA,GAAMC,CAAAA,KAAK,CAAGH,YAAY,CAACI,MAA3B,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,KAApB,CAA2BE,CAAC,EAA5B,CAAgC,CAC9B,GAAMC,CAAAA,IAAI,CAAGN,YAAY,CAACK,CAAD,CAAzB,CAEA,GAAME,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,EAAIP,MAAM,CAAGC,QAAb,CAAZ,EAAsC,CAAlD,CACA,GAAMW,CAAAA,GAAG,CAAGF,IAAI,CAACC,KAAL,CAAWJ,CAAC,EAAKP,MAAD,CAAWC,QAAf,CAAZ,EAAwC,CAApD,CAEA,GAAMY,CAAAA,EAAE,CAAGJ,GAAG,CAAGR,QAAjB,CACA,GAAMa,CAAAA,EAAE,CAAGF,GAAG,CAAGX,QAAjB,CAEAO,IAAI,CAACK,EAAL,CAAUA,EAAV,CACAL,IAAI,CAACM,EAAL,CAAUA,EAAV,CACD,CAED,MAAOf,CAAAA,KAAP,CACD","sourcesContent":["import { shuffle } from '../utils';\n\nexport function applyFixedNodeGrid(nodes, height=600) {\n  shuffle(nodes);\n\n  const gridSize = 100;\n  const nodesToAlign = nodes.filter(({ type }) => type === 'venue');\n  const count = nodesToAlign.length;\n  \n  for (var i = 0; i < count; i++) {\n    const node = nodesToAlign[i];\n\n    const row = Math.floor(i / (height / gridSize)) + 1;\n    const col = Math.floor(i % ((height) / gridSize)) + 1;\n    \n    const fx = row * gridSize;\n    const fy = col * gridSize;\n\n    node.fx = fx;\n    node.fy = fy;\n  }\n\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}