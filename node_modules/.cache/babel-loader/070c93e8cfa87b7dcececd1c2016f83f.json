{"ast":null,"code":"/* eslint-disable */\nimport { COLORS as colors } from './constants';\nimport React, { useState, useEffect, useRef } from 'react';\nexport function useInterval(callback, delay) {\n  // https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n  // danke, dan\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction getRandom(length) {\n  return Math.floor(Math.random() * length);\n}\n\nexport function randomSample(array, size) {\n  // https://stackoverflow.com/a/37835673\n  var r,\n      i = array.length,\n      end = i - size,\n      temp,\n      swaps = randomSample.swaps;\n\n  while (i-- > end) {\n    r = getRandom(i + 1);\n    temp = array[r];\n    array[r] = array[i];\n    array[i] = temp;\n    swaps.push(i);\n    swaps.push(r);\n  }\n\n  var sample = array.slice(end);\n\n  while (size--) {\n    i = swaps.pop();\n    r = swaps.pop();\n    temp = array[i];\n    array[i] = array[r];\n    array[r] = temp;\n  }\n\n  return sample;\n}\nrandomSample.swaps = [];\nexport function randomChoice(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\nexport function weightedRandom(spec) {\n  const random = Math.random();\n  let sum = .0;\n\n  for (var i in spec) {\n    const [prob, value] = spec[i];\n    sum += prob;\n\n    if (random <= sum) {\n      return value;\n    }\n\n    ;\n  }\n}\n;\nexport function rangeBetween(min, max) {\n  return Math.random() * (max - min) + min;\n}\nexport function shade(value) {\n  let sum = 0;\n\n  for (var i in colors) {\n    const color = colors[i];\n\n    if (value <= sum) {\n      return color;\n    }\n\n    ;\n    sum += 1 / colors.length;\n  }\n\n  return colors[colors.length - 1];\n}\nexport function padding(value, max, padded) {\n  return Math.min(Math.max(padded, value), max - 50);\n}\nexport function distance(source, target) {\n  return Math.sqrt(Math.pow(target.x - source.x, 2) + Math.pow(target.y - source.y, 2));\n}","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/src/utils.js"],"names":["COLORS","colors","React","useState","useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","getRandom","length","Math","floor","random","randomSample","array","size","r","i","end","temp","swaps","push","sample","slice","pop","randomChoice","shuffle","currentIndex","temporaryValue","randomIndex","weightedRandom","spec","sum","prob","value","rangeBetween","min","max","shade","color","padding","padded","distance","source","target","sqrt","pow","x","y"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { COLORS as colors } from './constants';\nimport React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  // https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n  // danke, dan\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction getRandom(length) { return Math.floor(Math.random() * length); }\n\nexport function randomSample(array, size) {\n  // https://stackoverflow.com/a/37835673\n  var r, i = array.length, end = i - size, temp, swaps = randomSample.swaps;\n\n  while (i-- > end) {\n      r = getRandom(i + 1);\n      temp = array[r];\n      array[r] = array[i];\n      array[i] = temp;\n      swaps.push(i);\n      swaps.push(r);\n  }\n\n  var sample = array.slice(end);\n\n  while(size--) {\n      i = swaps.pop();\n      r = swaps.pop();\n      temp = array[i];\n      array[i] = array[r];\n      array[r] = temp;\n  }\n\n  return sample;\n}\nrandomSample.swaps = [];\n\nexport function randomChoice(array) {\n  return array[Math.floor(Math.random() * array.length)]\n}\n\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport function weightedRandom(spec) {\n  const random = Math.random();\n  let sum = .0;\n\n  for (var i in spec) {\n    const [prob, value] = spec[i];\n    sum += prob;\n    if (random <= sum) {\n      return value;\n    };\n  }\n};\n\nexport function rangeBetween(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport function shade(value) {\n  let sum = 0;\n\n  for (var i in colors) {\n    const color = colors[i];\n    if (value <= sum) {\n      return color;\n    };\n\n    sum += 1 / colors.length;\n  }\n\n  return colors[colors.length - 1];\n}\n\nexport function padding(value, max, padded) {\n  return Math.min(Math.max(padded, value), max - 50);\n}\n\nexport function distance(source, target) {\n    return Math.sqrt(Math.pow(target.x - source.x, 2) + Math.pow(target.y - source.y, 2))\n}\n"]},"metadata":{},"sourceType":"module"}