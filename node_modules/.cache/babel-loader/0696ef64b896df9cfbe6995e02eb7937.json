{"ast":null,"code":"var _jsxFileName = \"/Users/rohitrajan/Rohit/projects/nodejs-coronasim/src/Graph.js\";\nimport React, { Component } from \"react\";\nimport { forceSimulation, forceLink, forceCollide } from \"d3-force\";\nimport Node from \"./Node\";\nexport default class Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.handleTick = this.handleTick.bind(this);\n    this.setCurrent = this.setCurrent.bind(this);\n    this.state = {\n      current: null,\n      layout: props.nodes.reduce((prev, acc) => (prev[acc.id] = {\n        x: 0,\n        y: 0\n      }, prev), {})\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillMount() {\n    this.runForceSimulation();\n    this.simulation.on(\"tick\", this.handleTick);\n  }\n\n  componentWillUnmount() {\n    this.simulation.on(\"tick\", null);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.tick !== nextProps.tick) {\n      this.updateForceSimulation();\n    }\n  }\n\n  updateForceSimulation() {\n    this.simulation.alpha(0.2).restart();\n    this.simulation.nodes(this.props.nodes);\n    this.simulation.force(\"link\").links(this.props.edges);\n  }\n\n  shouldComponentUpdate(props, nextProps) {\n    return props.tick !== nextProps.tick;\n  }\n\n  runForceSimulation() {\n    const {\n      nodes,\n      edges\n    } = this.props;\n    const simulation = this.simulation = forceSimulation(nodes).force(\"link\", forceLink().id(node => node.id)).force(\"collide\", forceCollide(() => 1).iterations(1).radius(9));\n    simulation.force(\"link\").links(edges).distance(25);\n  }\n\n  handleTick() {\n    const {\n      simulation\n    } = this;\n    const {\n      layout\n    } = this.state;\n    let updates = {};\n    simulation.nodes().map(node => {\n      updates[node.id] = node;\n    });\n    this.setState({\n      layout: { ...layout,\n        ...updates\n      }\n    });\n  }\n\n  setCurrent(nodeId) {\n    return () => {\n      this.setState({\n        current: nodeId\n      });\n    };\n  }\n\n  render() {\n    const {\n      nodes,\n      edges,\n      width,\n      height,\n      onNodeClick\n    } = this.props;\n    const {\n      layout,\n      current\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      ref: ref => this.svgRef = ref,\n      height: height,\n      style: {\n        shapeRendering: \"geometricPrecision\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, nodes.map((node, index) => /*#__PURE__*/React.createElement(Node, Object.assign({\n      key: index,\n      node: node,\n      layout: layout,\n      current: current,\n      width: width,\n      height: height,\n      onNodeClick: onNodeClick\n    }, node, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\nGraph.defaultProps = {\n  width: 900,\n  height: 600,\n  nodes: [],\n  edges: []\n};","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/nodejs-coronasim/src/Graph.js"],"names":["React","Component","forceSimulation","forceLink","forceCollide","Node","Graph","constructor","props","handleTick","bind","setCurrent","state","current","layout","nodes","reduce","prev","acc","id","x","y","componentDidMount","componentWillMount","runForceSimulation","simulation","on","componentWillUnmount","componentWillReceiveProps","nextProps","tick","updateForceSimulation","alpha","restart","force","links","edges","shouldComponentUpdate","node","iterations","radius","distance","updates","map","setState","nodeId","render","width","height","onNodeClick","ref","svgRef","shapeRendering","index","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n  forceSimulation,\n  forceLink,\n  forceCollide\n} from \"d3-force\";\n\nimport Node from \"./Node\";\n\nexport default class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTick = this.handleTick.bind(this);\n    this.setCurrent = this.setCurrent.bind(this);\n\n    this.state = {\n      current: null,\n      layout: props.nodes.reduce(\n        (prev, acc) => (\n          (prev[acc.id] = {\n            x: 0,\n            y: 0\n          }),\n          prev\n        ),\n        {}\n      )\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillMount() {\n    this.runForceSimulation();\n\n    this.simulation.on(\"tick\", this.handleTick);\n  }\n\n  componentWillUnmount() {\n    this.simulation.on(\"tick\", null);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.tick !== nextProps.tick) {\n      this.updateForceSimulation();\n    }\n  }\n\n  updateForceSimulation() {\n    this.simulation.alpha(0.2).restart();\n    this.simulation.nodes(this.props.nodes);\n    this.simulation.force(\"link\").links(this.props.edges);\n  }\n\n  shouldComponentUpdate(props, nextProps) {\n    return props.tick !== nextProps.tick;\n  }\n\n  runForceSimulation() {\n    const { nodes, edges } = this.props;\n\n    const simulation = (this.simulation = forceSimulation(nodes)\n      .force(\n        \"link\",\n        forceLink().id(node => node.id)\n      )\n      .force(\n        \"collide\",\n        forceCollide(() => 1)\n          .iterations(1)\n          .radius(9)\n      ));\n\n    simulation\n      .force(\"link\")\n      .links(edges)\n      .distance(25);\n  }\n\n  handleTick() {\n    const { simulation } = this;\n    const { layout } = this.state;\n    let updates = {};\n\n    simulation.nodes().map(node => {\n      updates[node.id] = node;\n    });\n\n    this.setState({\n      layout: {\n        ...layout,\n        ...updates\n      }\n    });\n  }\n\n  setCurrent(nodeId) {\n    return () => {\n      this.setState({\n        current: nodeId\n      });\n    };\n  }\n\n  render() {\n    const { nodes, edges, width, height, onNodeClick } = this.props;\n    const { layout, current } = this.state;\n    return (\n      <svg\n        width={width}\n        ref={ref => (this.svgRef = ref)}\n        height={height}\n        style={{\n          shapeRendering: \"geometricPrecision\"\n        }}\n      >\n        {nodes.map((node, index) => (\n          <Node\n            key={index}\n            node={node}\n            layout={layout}\n            current={current}\n            width={width}\n            height={height}\n            onNodeClick={onNodeClick}\n            {...node}\n          />\n        ))}\n      </svg>\n    );\n  }\n}\n\nGraph.defaultProps = {\n  width: 900,\n  height: 600,\n  nodes: [],\n  edges: []\n};\n"]},"metadata":{},"sourceType":"module"}