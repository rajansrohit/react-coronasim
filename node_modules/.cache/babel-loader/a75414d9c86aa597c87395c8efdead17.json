{"ast":null,"code":"import { dispatch } from \"d3-dispatch\";\nimport { timer } from \"d3-timer\";\nexport function x(d) {\n  return d.x;\n}\nexport function y(d) {\n  return d.y;\n}\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\nexport default function (_nodes) {\n  var simulation,\n      _alpha = 1,\n      _alphaMin = 0.001,\n      _alphaDecay = 1 - Math.pow(_alphaMin, 1 / 300),\n      _alphaTarget = 0,\n      _velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\");\n\n  if (_nodes == null) _nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n\n    if (_alpha < _alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i,\n        n = _nodes.length,\n        node;\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      _alpha += (_alphaTarget - _alpha) * _alphaDecay;\n      forces.forEach(function (force) {\n        force(_alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = _nodes[i];\n        if (node.fx == null) node.x += node.vx *= _velocityDecay;else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= _velocityDecay;else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = _nodes.length, node; i < n; ++i) {\n      node = _nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i),\n            angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(_nodes);\n    return force;\n  }\n\n  initializeNodes();\n  return simulation = {\n    tick: tick,\n    restart: function restart() {\n      return stepper.restart(step), simulation;\n    },\n    stop: function stop() {\n      return stepper.stop(), simulation;\n    },\n    nodes: function nodes(_) {\n      return arguments.length ? (_nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : _nodes;\n    },\n    alpha: function alpha(_) {\n      return arguments.length ? (_alpha = +_, simulation) : _alpha;\n    },\n    alphaMin: function alphaMin(_) {\n      return arguments.length ? (_alphaMin = +_, simulation) : _alphaMin;\n    },\n    alphaDecay: function alphaDecay(_) {\n      return arguments.length ? (_alphaDecay = +_, simulation) : +_alphaDecay;\n    },\n    alphaTarget: function alphaTarget(_) {\n      return arguments.length ? (_alphaTarget = +_, simulation) : _alphaTarget;\n    },\n    velocityDecay: function velocityDecay(_) {\n      return arguments.length ? (_velocityDecay = 1 - _, simulation) : 1 - _velocityDecay;\n    },\n    force: function force(name, _) {\n      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n    },\n    find: function find(x, y, radius) {\n      var i = 0,\n          n = _nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n      if (radius == null) radius = Infinity;else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = _nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n    on: function on(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/rohitrajan/Rohit/projects/coronasim/react-coronasim/home/node_modules/d3-force/src/simulation.js"],"names":["dispatch","timer","x","d","y","initialRadius","initialAngle","Math","PI","sqrt","nodes","simulation","alpha","alphaMin","alphaDecay","pow","alphaTarget","velocityDecay","forces","Map","stepper","step","event","tick","call","stop","iterations","i","n","length","node","undefined","k","forEach","force","fx","vx","fy","vy","initializeNodes","index","isNaN","radius","angle","cos","sin","initializeForce","initialize","restart","_","arguments","name","delete","set","get","find","dx","dy","d2","closest","Infinity","on"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,aAAvB;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,OAAO,SAASC,CAAT,CAAWC,CAAX,EAAc;AACnB,SAAOA,CAAC,CAACD,CAAT;AACD;AAED,OAAO,SAASE,CAAT,CAAWD,CAAX,EAAc;AACnB,SAAOA,CAAC,CAACC,CAAT;AACD;AAED,IAAIC,aAAa,GAAG,EAApB;AAAA,IACIC,YAAY,GAAGC,IAAI,CAACC,EAAL,IAAW,IAAID,IAAI,CAACE,IAAL,CAAU,CAAV,CAAf,CADnB;AAGA,eAAe,UAASC,MAAT,EAAgB;AAC7B,MAAIC,UAAJ;AAAA,MACIC,MAAK,GAAG,CADZ;AAAA,MAEIC,SAAQ,GAAG,KAFf;AAAA,MAGIC,WAAU,GAAG,IAAIP,IAAI,CAACQ,GAAL,CAASF,SAAT,EAAmB,IAAI,GAAvB,CAHrB;AAAA,MAIIG,YAAW,GAAG,CAJlB;AAAA,MAKIC,cAAa,GAAG,GALpB;AAAA,MAMIC,MAAM,GAAG,IAAIC,GAAJ,EANb;AAAA,MAOIC,OAAO,GAAGnB,KAAK,CAACoB,IAAD,CAPnB;AAAA,MAQIC,KAAK,GAAGtB,QAAQ,CAAC,MAAD,EAAS,KAAT,CARpB;;AAUA,MAAIU,MAAK,IAAI,IAAb,EAAmBA,MAAK,GAAG,EAAR;;AAEnB,WAASW,IAAT,GAAgB;AACdE,IAAAA,IAAI;AACJD,IAAAA,KAAK,CAACE,IAAN,CAAW,MAAX,EAAmBb,UAAnB;;AACA,QAAIC,MAAK,GAAGC,SAAZ,EAAsB;AACpBO,MAAAA,OAAO,CAACK,IAAR;AACAH,MAAAA,KAAK,CAACE,IAAN,CAAW,KAAX,EAAkBb,UAAlB;AACD;AACF;;AAED,WAASY,IAAT,CAAcG,UAAd,EAA0B;AACxB,QAAIC,CAAJ;AAAA,QAAOC,CAAC,GAAGlB,MAAK,CAACmB,MAAjB;AAAA,QAAyBC,IAAzB;AAEA,QAAIJ,UAAU,KAAKK,SAAnB,EAA8BL,UAAU,GAAG,CAAb;;AAE9B,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgC,EAAEM,CAAlC,EAAqC;AACnCpB,MAAAA,MAAK,IAAI,CAACI,YAAW,GAAGJ,MAAf,IAAwBE,WAAjC;AAEAI,MAAAA,MAAM,CAACe,OAAP,CAAe,UAASC,KAAT,EAAgB;AAC7BA,QAAAA,KAAK,CAACtB,MAAD,CAAL;AACD,OAFD;;AAIA,WAAKe,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,CAAhB,EAAmB,EAAED,CAArB,EAAwB;AACtBG,QAAAA,IAAI,GAAGpB,MAAK,CAACiB,CAAD,CAAZ;AACA,YAAIG,IAAI,CAACK,EAAL,IAAW,IAAf,EAAqBL,IAAI,CAAC5B,CAAL,IAAU4B,IAAI,CAACM,EAAL,IAAWnB,cAArB,CAArB,KACKa,IAAI,CAAC5B,CAAL,GAAS4B,IAAI,CAACK,EAAd,EAAkBL,IAAI,CAACM,EAAL,GAAU,CAA5B;AACL,YAAIN,IAAI,CAACO,EAAL,IAAW,IAAf,EAAqBP,IAAI,CAAC1B,CAAL,IAAU0B,IAAI,CAACQ,EAAL,IAAWrB,cAArB,CAArB,KACKa,IAAI,CAAC1B,CAAL,GAAS0B,IAAI,CAACO,EAAd,EAAkBP,IAAI,CAACQ,EAAL,GAAU,CAA5B;AACN;AACF;;AAED,WAAO3B,UAAP;AACD;;AAED,WAAS4B,eAAT,GAA2B;AACzB,SAAK,IAAIZ,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGlB,MAAK,CAACmB,MAArB,EAA6BC,IAAlC,EAAwCH,CAAC,GAAGC,CAA5C,EAA+C,EAAED,CAAjD,EAAoD;AAClDG,MAAAA,IAAI,GAAGpB,MAAK,CAACiB,CAAD,CAAZ,EAAiBG,IAAI,CAACU,KAAL,GAAab,CAA9B;AACA,UAAIG,IAAI,CAACK,EAAL,IAAW,IAAf,EAAqBL,IAAI,CAAC5B,CAAL,GAAS4B,IAAI,CAACK,EAAd;AACrB,UAAIL,IAAI,CAACO,EAAL,IAAW,IAAf,EAAqBP,IAAI,CAAC1B,CAAL,GAAS0B,IAAI,CAACO,EAAd;;AACrB,UAAII,KAAK,CAACX,IAAI,CAAC5B,CAAN,CAAL,IAAiBuC,KAAK,CAACX,IAAI,CAAC1B,CAAN,CAA1B,EAAoC;AAClC,YAAIsC,MAAM,GAAGrC,aAAa,GAAGE,IAAI,CAACE,IAAL,CAAUkB,CAAV,CAA7B;AAAA,YAA2CgB,KAAK,GAAGhB,CAAC,GAAGrB,YAAvD;AACAwB,QAAAA,IAAI,CAAC5B,CAAL,GAASwC,MAAM,GAAGnC,IAAI,CAACqC,GAAL,CAASD,KAAT,CAAlB;AACAb,QAAAA,IAAI,CAAC1B,CAAL,GAASsC,MAAM,GAAGnC,IAAI,CAACsC,GAAL,CAASF,KAAT,CAAlB;AACD;;AACD,UAAIF,KAAK,CAACX,IAAI,CAACM,EAAN,CAAL,IAAkBK,KAAK,CAACX,IAAI,CAACQ,EAAN,CAA3B,EAAsC;AACpCR,QAAAA,IAAI,CAACM,EAAL,GAAUN,IAAI,CAACQ,EAAL,GAAU,CAApB;AACD;AACF;AACF;;AAED,WAASQ,eAAT,CAAyBZ,KAAzB,EAAgC;AAC9B,QAAIA,KAAK,CAACa,UAAV,EAAsBb,KAAK,CAACa,UAAN,CAAiBrC,MAAjB;AACtB,WAAOwB,KAAP;AACD;;AAEDK,EAAAA,eAAe;AAEf,SAAO5B,UAAU,GAAG;AAClBY,IAAAA,IAAI,EAAEA,IADY;AAGlByB,IAAAA,OAAO,EAAE,mBAAW;AAClB,aAAO5B,OAAO,CAAC4B,OAAR,CAAgB3B,IAAhB,GAAuBV,UAA9B;AACD,KALiB;AAOlBc,IAAAA,IAAI,EAAE,gBAAW;AACf,aAAOL,OAAO,CAACK,IAAR,IAAgBd,UAAvB;AACD,KATiB;AAWlBD,IAAAA,KAAK,EAAE,eAASuC,CAAT,EAAY;AACjB,aAAOC,SAAS,CAACrB,MAAV,IAAoBnB,MAAK,GAAGuC,CAAR,EAAWV,eAAe,EAA1B,EAA8BrB,MAAM,CAACe,OAAP,CAAea,eAAf,CAA9B,EAA+DnC,UAAnF,IAAiGD,MAAxG;AACD,KAbiB;AAelBE,IAAAA,KAAK,EAAE,eAASqC,CAAT,EAAY;AACjB,aAAOC,SAAS,CAACrB,MAAV,IAAoBjB,MAAK,GAAG,CAACqC,CAAT,EAAYtC,UAAhC,IAA8CC,MAArD;AACD,KAjBiB;AAmBlBC,IAAAA,QAAQ,EAAE,kBAASoC,CAAT,EAAY;AACpB,aAAOC,SAAS,CAACrB,MAAV,IAAoBhB,SAAQ,GAAG,CAACoC,CAAZ,EAAetC,UAAnC,IAAiDE,SAAxD;AACD,KArBiB;AAuBlBC,IAAAA,UAAU,EAAE,oBAASmC,CAAT,EAAY;AACtB,aAAOC,SAAS,CAACrB,MAAV,IAAoBf,WAAU,GAAG,CAACmC,CAAd,EAAiBtC,UAArC,IAAmD,CAACG,WAA3D;AACD,KAzBiB;AA2BlBE,IAAAA,WAAW,EAAE,qBAASiC,CAAT,EAAY;AACvB,aAAOC,SAAS,CAACrB,MAAV,IAAoBb,YAAW,GAAG,CAACiC,CAAf,EAAkBtC,UAAtC,IAAoDK,YAA3D;AACD,KA7BiB;AA+BlBC,IAAAA,aAAa,EAAE,uBAASgC,CAAT,EAAY;AACzB,aAAOC,SAAS,CAACrB,MAAV,IAAoBZ,cAAa,GAAG,IAAIgC,CAApB,EAAuBtC,UAA3C,IAAyD,IAAIM,cAApE;AACD,KAjCiB;AAmClBiB,IAAAA,KAAK,EAAE,eAASiB,IAAT,EAAeF,CAAf,EAAkB;AACvB,aAAOC,SAAS,CAACrB,MAAV,GAAmB,CAAnB,IAAyBoB,CAAC,IAAI,IAAL,GAAY/B,MAAM,CAACkC,MAAP,CAAcD,IAAd,CAAZ,GAAkCjC,MAAM,CAACmC,GAAP,CAAWF,IAAX,EAAiBL,eAAe,CAACG,CAAD,CAAhC,CAAnC,EAA0EtC,UAAlG,IAAgHO,MAAM,CAACoC,GAAP,CAAWH,IAAX,CAAvH;AACD,KArCiB;AAuClBI,IAAAA,IAAI,EAAE,cAASrD,CAAT,EAAYE,CAAZ,EAAesC,MAAf,EAAuB;AAC3B,UAAIf,CAAC,GAAG,CAAR;AAAA,UACIC,CAAC,GAAGlB,MAAK,CAACmB,MADd;AAAA,UAEI2B,EAFJ;AAAA,UAGIC,EAHJ;AAAA,UAIIC,EAJJ;AAAA,UAKI5B,IALJ;AAAA,UAMI6B,OANJ;AAQA,UAAIjB,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAGkB,QAAT,CAApB,KACKlB,MAAM,IAAIA,MAAV;;AAEL,WAAKf,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,CAAhB,EAAmB,EAAED,CAArB,EAAwB;AACtBG,QAAAA,IAAI,GAAGpB,MAAK,CAACiB,CAAD,CAAZ;AACA6B,QAAAA,EAAE,GAAGtD,CAAC,GAAG4B,IAAI,CAAC5B,CAAd;AACAuD,QAAAA,EAAE,GAAGrD,CAAC,GAAG0B,IAAI,CAAC1B,CAAd;AACAsD,QAAAA,EAAE,GAAGF,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAApB;AACA,YAAIC,EAAE,GAAGhB,MAAT,EAAiBiB,OAAO,GAAG7B,IAAV,EAAgBY,MAAM,GAAGgB,EAAzB;AAClB;;AAED,aAAOC,OAAP;AACD,KA5DiB;AA8DlBE,IAAAA,EAAE,EAAE,YAASV,IAAT,EAAeF,CAAf,EAAkB;AACpB,aAAOC,SAAS,CAACrB,MAAV,GAAmB,CAAnB,IAAwBP,KAAK,CAACuC,EAAN,CAASV,IAAT,EAAeF,CAAf,GAAmBtC,UAA3C,IAAyDW,KAAK,CAACuC,EAAN,CAASV,IAAT,CAAhE;AACD;AAhEiB,GAApB;AAkED","sourcesContent":["import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\");\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}