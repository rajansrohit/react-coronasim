{"version":3,"sources":["LineChart.module.css","utils.js","Node.js","constants.js","Graph.js","LineChart.js","SimulationSettings.js","simulation/markov.js","simulation/grid.js","simulation/index.js","App.js","serviceWorker.js","index.js","App.module.css","SimulationSettings.module.css","Graph.module.css"],"names":["module","exports","randomSample","array","size","r","temp","length","i","end","swaps","Math","floor","random","push","sample","slice","pop","shuffle","temporaryValue","randomIndex","currentIndex","weightedRandom","spec","sum","prob","value","padding","max","padded","min","distance","source","target","sqrt","pow","x","y","noop","ICONS","house","hospital","school","station","supermarket","Node","layout","node","width","height","type","venue","onNodeClick","position","id","transform","classes","classNames","styles","susceptible","state","sick","recovered","dead","locked","key","className","onClick","fontSize","stroke","fill","strokeWidth","Graph","props","handleTick","bind","setCurrent","current","nodes","reduce","prev","acc","this","runForceSimulation","simulation","on","nextProps","tick","updateForceSimulation","alpha","restart","force","links","edges","forceSimulation","forceLink","forceCollide","iterations","radius","updates","map","setState","nodeId","ref","svgRef","style","shapeRendering","index","Component","defaultProps","buildPolyLineString","points","xMultipier","yMultipier","maxXEntries","concat","join","LineChart","xOffset","yOffset","data","maxYPoint","maxYRange","scaleY","labelY","lineChart","color","labelX","SimulationSettings","simulationState","onSettingChange","onRestartButtonClick","container","form","onChange","initialSickAgents","agentsPerHouse","houses","busStations","hospitals","supermarkets","schools","footer","SIR_TRANSITION_STATE","DISEASE_SPREAD_TRANSITION","getNextMarkovStateForAgent","agent","transitionMap","location","split","agentLocation","applyFixedNodeGrid","gridSize","nodesToAlign","filter","count","row","col","fx","fy","VENUES","name","members","isRoot","VENUE_TRANSITIONS","getInitialGraph","forEach","alignment","nodeIndex","venueId","j","agentId","base","sickAgents","nextSimulationTick","find","nextMarkovState","moveAgent","fellow","applySIRModel","targetNode","sourceNode","edge","INITIAL_SIMULATION_STATE","INITIAL_GRAPH","App","useState","setSimulationState","setNodes","setEdges","historicalSickCount","setHistoricalSickCount","historicalRecoveredCount","setHistoricalRecoveredCount","historicalDeadCount","setHistoricalDeadCount","loading","setLoading","graphRef","useRef","callback","delay","savedCallback","useEffect","setInterval","clearInterval","useInterval","header","samples","sampleSusceptible","sampleInfected","sampleRecovered","round","section","stats","population","simulationSettings","event","pageInfo","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9372fff8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChart\":\"LineChart_lineChart__1YIFO\",\"labelY\":\"LineChart_labelY__3CF0E\",\"labelX\":\"LineChart_labelX__L30Wm\"};","/* eslint-disable */\nimport { COLORS as colors } from './constants';\nimport React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  // https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n  // danke, dan\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction getRandom(length) { return Math.floor(Math.random() * length); }\n\nexport function randomSample(array, size) {\n  // https://stackoverflow.com/a/37835673\n  var r, i = array.length, end = i - size, temp, swaps = randomSample.swaps;\n\n  while (i-- > end) {\n      r = getRandom(i + 1);\n      temp = array[r];\n      array[r] = array[i];\n      array[i] = temp;\n      swaps.push(i);\n      swaps.push(r);\n  }\n\n  var sample = array.slice(end);\n\n  while(size--) {\n      i = swaps.pop();\n      r = swaps.pop();\n      temp = array[i];\n      array[i] = array[r];\n      array[r] = temp;\n  }\n\n  return sample;\n}\nrandomSample.swaps = [];\n\nexport function randomChoice(array) {\n  return array[Math.floor(Math.random() * array.length)]\n}\n\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport function weightedRandom(spec) {\n  const random = Math.random();\n  let sum = .0;\n\n  for (var i in spec) {\n    const [prob, value] = spec[i];\n    sum += prob;\n    if (random <= sum) {\n      return value;\n    };\n  }\n};\n\nexport function rangeBetween(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport function shade(value) {\n  let sum = 0;\n\n  for (var i in colors) {\n    const color = colors[i];\n    if (value <= sum) {\n      return color;\n    };\n\n    sum += 1 / colors.length;\n  }\n\n  return colors[colors.length - 1];\n}\n\nexport function padding(value, max, padded) {\n  return Math.min(Math.max(padded, value), max - 50);\n}\n\nexport function distance(source, target) {\n    return Math.sqrt(Math.pow(target.x - source.x, 2) + Math.pow(target.y - source.y, 2))\n}\n","/* eslint-disable */\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\n\nimport styles from \"./Graph.module.css\";\nimport { padding, shade } from \"./utils\";\nimport { VENUE, SUSCEPTIBLE, SICK, RECOVERED, DEAD } from \"./constants\";\n\nfunction noop() {}\n\nconst ICONS = {\n  house: \"🏠\",\n  hospital: \"🏥\",\n  school: \"🏫\",\n  station: \"🚌\",\n  supermarket: \"🛒\"\n};\n\nexport default function Node({\n  layout,\n  node,\n  width,\n  height,\n  type,\n  venue,\n  onNodeClick = noop\n}) {\n  const position = layout[node.id];\n  const transform = `translate(\n    ${padding(position.x, width, 7)},\n    ${padding(position.y, height, 30)}\n  )`;\n\n  const classes = classNames({\n    [styles.node]: true,\n    [styles[type]]: true,\n    [styles[venue]]: true,\n    [styles.susceptible]: node.state === SUSCEPTIBLE,\n    [styles.sick]: node.state === SICK,\n    [styles.recovered]: node.state === RECOVERED,\n    [styles.dead]: node.state === DEAD,\n    [styles.locked]: node.locked\n  });\n\n  return (\n    <g key={`${node.id}-Node`} id={node.id} transform={transform}>\n      {node.type === VENUE ? (\n        <text\n          className={classes}\n          onClick={onNodeClick(node.id)}\n          x={-8}\n          y={7}\n          fontSize={16}\n        >\n          {ICONS[node.venue]}\n        </text>\n      ) : node.state === 3 ? (\n        <text onClick={onNodeClick(node.id)} x={-8} y={7} fontSize={16}>\n          💀\n        </text>\n      ) : (\n        <circle\n          className={classes}\n          r={5}\n          stroke={0}\n          onClick={onNodeClick(node.id)}\n          fill={\"black\"}\n        />\n      )}\n      {false && node.type === VENUE && (\n        <text fontSize={9} x={-(node.venue.length * 3.1)} y={20} fill={\"black\"}>\n          {node.venue.toUpperCase()}\n        </text>\n      )}\n      {node.locked && (\n        <circle r={40} fill={\"none\"} stroke={\"gray\"} strokeWidth={2} />\n      )}\n    </g>\n  );\n}\n","const VENUE = 'venue';\nconst AGENT = 'agent';\n\nconst SUSCEPTIBLE = 0;\nconst SICK = 1;\nconst RECOVERED = 2;\nconst DEAD = 3;\n\nconst COLORS = ['#ECA6E1','#C28CBE','#9B729C','#76597B','#55415B','#362A3C'];\nconst FPS = 400;\n\nexport {\n  SUSCEPTIBLE, SICK, RECOVERED, DEAD,\n  VENUE, AGENT,\n  COLORS,\n  FPS,\n};\n","/* eslint-disable */\nimport React, { Component } from \"react\";\n\nimport {\n  forceSimulation,\n  forceLink,\n  forceCollide\n} from \"d3-force\";\n\nimport Node from \"./Node\";\n\nexport default class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTick = this.handleTick.bind(this);\n    this.setCurrent = this.setCurrent.bind(this);\n\n    this.state = {\n      current: null,\n      layout: props.nodes.reduce(\n        (prev, acc) => (\n          (prev[acc.id] = {\n            x: 0,\n            y: 0\n          }),\n          prev\n        ),\n        {}\n      )\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillMount() {\n    this.runForceSimulation();\n\n    this.simulation.on(\"tick\", this.handleTick);\n  }\n\n  componentWillUnmount() {\n    this.simulation.on(\"tick\", null);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.tick !== nextProps.tick) {\n      this.updateForceSimulation();\n    }\n  }\n\n  updateForceSimulation() {\n    this.simulation.alpha(0.2).restart();\n    this.simulation.nodes(this.props.nodes);\n    this.simulation.force(\"link\").links(this.props.edges);\n  }\n\n  shouldComponentUpdate(props, nextProps) {\n    return props.tick !== nextProps.tick;\n  }\n\n  runForceSimulation() {\n    const { nodes, edges } = this.props;\n\n    const simulation = (this.simulation = forceSimulation(nodes)\n      .force(\n        \"link\",\n        forceLink().id(node => node.id)\n      )\n      .force(\n        \"collide\",\n        forceCollide(() => 1)\n          .iterations(1)\n          .radius(9)\n      ));\n\n    simulation\n      .force(\"link\")\n      .links(edges)\n      .distance(25);\n  }\n\n  handleTick() {\n    const { simulation } = this;\n    const { layout } = this.state;\n    let updates = {};\n\n    simulation.nodes().map(node => {\n      updates[node.id] = node;\n    });\n\n    this.setState({\n      layout: {\n        ...layout,\n        ...updates\n      }\n    });\n  }\n\n  setCurrent(nodeId) {\n    return () => {\n      this.setState({\n        current: nodeId\n      });\n    };\n  }\n\n  render() {\n    const { nodes, edges, width, height, onNodeClick } = this.props;\n    const { layout, current } = this.state;\n    return (\n      <svg\n        width={width}\n        ref={ref => (this.svgRef = ref)}\n        height={height}\n        style={{\n          shapeRendering: \"geometricPrecision\"\n        }}\n      >\n        {nodes.map((node, index) => (\n          <Node\n            key={index}\n            node={node}\n            layout={layout}\n            current={current}\n            width={width}\n            height={height}\n            onNodeClick={onNodeClick}\n            {...node}\n          />\n        ))}\n      </svg>\n    );\n  }\n}\n\nGraph.defaultProps = {\n  width: 900,\n  height: 600,\n  nodes: [],\n  edges: []\n};\n","import React from \"react\";\n\nimport styles from \"./LineChart.module.css\";\n\nfunction buildPolyLineString(points, xMultipier, yMultipier, maxXEntries) {\n  return points\n    .slice(Math.max(points.length - maxXEntries, 0))\n    .reduce((acc, current, i) => {\n      return acc.concat(`${i * xMultipier}, ${-(current * yMultipier)}`);\n    }, [])\n    .join(\" \");\n}\n\nexport default function LineChart({\n  width,\n  height,\n  xOffset = 10,\n  yOffset = 17,\n  data = [],\n  maxXEntries = 100\n}) {\n  const maxYPoint = height - 50;\n  const maxYRange = Math.max(\n    maxYPoint,\n    ...data.reduce((prev, { points }) => prev.concat(points), [])\n  );\n\n  const yMultipier = 1;\n  const xMultipier = 2.5;\n  const scaleY = maxYPoint / maxYRange;\n\n  return (\n    <>\n      <span className={styles.labelY}>Population →</span>\n      <svg className={styles.lineChart} width={width} height={height}>\n        <g\n          transform={`scale(1, ${scaleY}), translate(0, ${(height - 30) /\n            scaleY})`}\n        >\n          {data.map(({ points, color }, i) => (\n            <g\n              key={`line-${i}`}\n              transform={`translate(${xOffset + 5}, ${yMultipier + yOffset})`}\n            >\n              <polyline\n                points={buildPolyLineString(\n                  points,\n                  xMultipier,\n                  yMultipier,\n                  maxXEntries\n                )}\n                stroke={color}\n                fill=\"transparent\"\n                strokeWidth={2}\n              />\n            </g>\n          ))}\n        </g>\n      </svg>\n      <span className={styles.labelX}>Days since the first case →</span>\n    </>\n  );\n}\n","import React from 'react';\n\nimport styles from './SimulationSettings.module.css';\n\nexport default function SimulationSettings({\n  simulationState,\n  onSettingChange,\n  onRestartButtonClick,\n}) {\n  return (\n    <div className={ styles.container }>\n      <div className={ styles.form }>\n      <label>\n        Initial sick agents<br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('initialSickAgents') }\n          value={ simulationState.initialSickAgents }\n          min={ 0 }\n          max={ 10 }\n        /> <span className={ styles.value }>{ simulationState.initialSickAgents }</span>\n      </label>\n      <label>\n        Agents per building <br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('agentsPerHouse') }\n          value={ simulationState.agentsPerHouse }\n          min={ 1 }\n          max={ 10 }\n        /> <span className={ styles.value }>{ simulationState.agentsPerHouse }</span>\n      </label>\n      <label>\n        Houses <br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('houses') }\n          value={ simulationState.houses }\n          min={ 0 }\n          max={ 50 }\n        /> <span className={ styles.value }>{ simulationState.houses }</span>\n      </label>\n      <label>\n        Bus stations <br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('busStations') }\n          value={ simulationState.busStations }\n          min={ 0 }\n          max={ 10 }\n        /> <span className={ styles.value }>{ simulationState.busStations }</span>\n      </label>\n      <label>\n        Hospitals <br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('hospitals') }\n          value={ simulationState.hospitals }\n          min={ 0 }\n          max={ 10 }\n        /> <span className={ styles.value }>{ simulationState.hospitals }</span>\n      </label>\n      <label>\n        Supermarkets <br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('supermarkets') }\n          value={ simulationState.supermarkets }\n          min={ 0 }\n          max={ 10 }\n        /> <span className={ styles.value }>{ simulationState.supermarkets }</span>\n      </label>\n      <label>\n        Schools <br />\n        <input\n          type={ 'range' }\n          onChange={ onSettingChange('schools') }\n          value={ simulationState.schools }\n          min={ 0 }\n          max={ 10 }\n        /> <span className={ styles.value }>{ simulationState.schools }</span>\n      </label>\n      </div>\n\n      <div className={ styles.footer }>\n        <button onClick={ onRestartButtonClick }>Restart simulation</button>\n      </div>\n    </div>\n  );\n}\n","import {\n  SUSCEPTIBLE, SICK, RECOVERED, DEAD,\n} from '../constants';\n\nimport { randomChoice, weightedRandom } from '../utils';\n\nexport const STAY = 'stay';\nexport const BASE = 'base';\n\nconst SIR_TRANSITION_STATE = {\n  [SUSCEPTIBLE]: [\n    [1, SUSCEPTIBLE],\n  ],\n  [RECOVERED]: [\n    [1, RECOVERED],\n  ],\n  [SICK]: [\n    [0.995, SICK],\n    [0.004, RECOVERED],\n    [0.001, DEAD],\n  ],\n  [DEAD]: [\n    [1, DEAD],\n  ],\n};\n\nconst DISEASE_SPREAD_TRANSITION = {\n  [SUSCEPTIBLE]: [\n    [0.3, SICK],\n    [0.7, SUSCEPTIBLE],\n  ],\n  [RECOVERED]: [\n    [1, RECOVERED],\n  ],\n  [SICK]: [\n    [1, SICK],\n  ],\n  [DEAD]: [\n    [1, DEAD],\n  ],\n};\n\nexport function getNextMarkovStateForAgent(agent, transitionMap) {\n  const [agentLocation] = agent.location.split('-');\n\n  if (agentLocation === 'house' && Math.random() < 0.9) {\n    return STAY;\n  }\n\n  const map = transitionMap[agentLocation];\n\n  return randomChoice(map);\n}\n\nexport function applySIRModel(nodes, edges) {\n  for (const node of nodes) {\n    if (node.type !== 'agent') {\n      continue;\n    }\n\n    const location = nodes.find(({ id }) => node.location === id);\n    const fellows = edges\n      .filter(({ target }) => target.id === location.id)\n      .map(({ source }) => source);\n\n    fellows.forEach(\n      (fellow) => {\n        if (fellow.id === node.id) {\n          return;\n        }\n\n        if (node.state === SICK) {\n          fellow.state = weightedRandom(DISEASE_SPREAD_TRANSITION[fellow.state]);\n        }\n\n        fellow.state = weightedRandom(SIR_TRANSITION_STATE[fellow.state]);\n      }\n    )\n  }\n}\n","import { shuffle } from '../utils';\n\nexport function applyFixedNodeGrid(nodes, height=600) {\n  shuffle(nodes);\n\n  const gridSize = 100;\n  const nodesToAlign = nodes.filter(({ type }) => type === 'venue');\n  const count = nodesToAlign.length;\n  \n  for (var i = 0; i < count; i++) {\n    const node = nodesToAlign[i];\n\n    const row = Math.floor(i / (height / gridSize)) + 1;\n    const col = Math.floor(i % ((height) / gridSize)) + 1;\n    \n    const fx = row * gridSize;\n    const fy = col * gridSize;\n\n    node.fx = fx;\n    node.fy = fy;\n  }\n\n  return nodes;\n}\n","/* eslint-disable */\nimport { randomSample, distance } from '../utils';\n\nimport { AGENT, SUSCEPTIBLE, SICK, DEAD } from '../constants';\n\nimport { getNextMarkovStateForAgent, STAY, BASE, applySIRModel } from './markov';\nimport { applyFixedNodeGrid } from './grid';\n\nconst VENUES = [\n  {\n    name: 'house',\n    members: simulationState => simulationState.agentsPerHouse,\n    isRoot: true,\n    count: simulationState => simulationState.houses,\n  },\n  {\n    name: 'school',\n    count: simulationState => simulationState.schools,\n  },\n  {\n    name: 'hospital',\n    count: simulationState => simulationState.hospitals,\n  },\n  {\n    name: 'supermarket',\n    count: simulationState => simulationState.supermarkets,\n  },\n  {\n    name: 'station',\n    count: simulationState => simulationState.busStations,\n  },\n];\n\nconst VENUE_TRANSITIONS = {\n  'house': ['supermarket', 'station', 'hospital', 'house', 'house', 'house',\n            'house', 'house', 'house', 'house', 'house'],\n  'supermarket': ['base', 'base', 'base', 'supermarket'],\n  'hospital': ['hospital', 'base', 'base', 'base'],\n  'station': ['supermarket', 'base', 'base', 'base', 'school'],\n  'school': ['supermarket', 'base', 'base', 'base'],\n};\n\nfunction getInitialGraph(simulationState) {\n  const nodes = [];\n  const edges = [];\n\n  VENUES.forEach(({\n    name,\n    members,\n    isRoot,\n    count,\n    alignment,\n  }) => {\n    for (let i = 0, nodeIndex = 0; i < count(simulationState); i++, nodeIndex++) {\n      const venueId = `${name}-${i}`;\n      const venueIndex = nodeIndex;\n      nodes.push({\n        type: 'venue',\n        venue: name,\n        id: venueId,\n        size: 1,\n      });\n\n      if (!members) {\n        continue;\n      }\n\n      for (var j = 0; j < members(simulationState); j++, nodeIndex++) {\n        const agentId = `${name}-${i}-${j}`;\n        nodes.push({\n          type: 'agent',\n          location: venueId,\n          base: venueId,\n          id: agentId,\n          size: 1,\n          state: SUSCEPTIBLE,\n        });\n        edges.push({\n          'source': agentId,\n          'target': venueId,\n        });\n      }\n    }\n  });\n\n  const sickAgents = randomSample(\n    nodes.filter(({ type }) => type === 'agent'),\n    simulationState.initialSickAgents\n  );\n\n  for (const agent of sickAgents) {\n    agent.state = SICK;\n  }\n\n  return ({\n    nodes: applyFixedNodeGrid(nodes),\n    edges,\n  });\n}\n\nfunction nextSimulationTick(state, nodes, edges) {\n  const rootVenue = VENUES.find(({ isRoot }) => isRoot);\n\n  nodes\n    .filter(\n      ({ type }) => type === AGENT\n    )\n    .forEach(\n      (agent, i) => {\n        const nextMarkovState = getNextMarkovStateForAgent(agent, VENUE_TRANSITIONS);\n        const [agentLocation] = agent.location.split('-')\n\n        if (\n          agentLocation === nextMarkovState ||\n          (nextMarkovState === BASE && agent.location === agent.base) ||\n          nextMarkovState === STAY\n        ) {\n          return;\n        } else if (agent.state === DEAD) {\n          return;\n        } else if (nextMarkovState === BASE) {\n          moveAgent(\n            nodes,\n            edges,\n            agent,\n            nodes.find(({ id }) => id === agent.base)\n          );\n        } else {\n          moveAgent(\n            nodes,\n            edges,\n            agent,\n            findClosestNode(agent, nodes.filter(({ venue }) => venue === nextMarkovState))\n          );\n        };\n\n      }\n    );\n\n\n  nodes = applySIRModel(nodes, edges);\n\n  return {\n    nodes: nodes,\n    edges: edges,\n    state: { ...state, tick: state.tick + 1},\n  }\n}\n\nfunction moveAgent(nodes, edges, agent, targetNode) {\n  const sourceNode = nodes.find(({ id }) => id === agent.location);\n\n  if (targetNode.locked || sourceNode.locked) {\n    return;\n  }\n\n  const newEdges = edges.map((edge) => {\n    if (edge.source.id === agent.id) {\n      edge.target = targetNode;\n    }\n  });\n\n  agent.location = targetNode.id;\n}\n\nfunction findClosestNode(source, targets) {\n  const closest = targets.reduce(\n    (prev, current) => distance(source, current) < distance(source, prev) ? current : prev\n  );\n\n  return closest;\n}\n\nexport {\n  VENUES,\n  VENUE_TRANSITIONS,\n  getInitialGraph,\n  nextSimulationTick,\n};\n","/* eslint-disable */\nimport React, { useEffect, useState, useRef } from \"react\";\n\nimport styles from \"./App.module.css\";\nimport Graph from \"./Graph\";\nimport LineChart from \"./LineChart\";\nimport SimulationSettings from \"./SimulationSettings\";\nimport { SICK, RECOVERED, DEAD } from \"./constants\";\nimport { useInterval, randomChoice } from \"./utils\";\nimport { nextSimulationTick, getInitialGraph } from \"./simulation\";\n\nconst INITIAL_SIMULATION_STATE = {\n  tick: 0,\n  agentsPerHouse: 8,\n  houses: 26,\n  busStations: 5,\n  hospitals: 3,\n  supermarkets: 5,\n  schools: 3,\n  initialSickAgents: 5,\n};\n\nconst INITIAL_GRAPH = getInitialGraph(INITIAL_SIMULATION_STATE);\n\nfunction App() {\n  const [simulationState, setSimulationState] = useState(\n    INITIAL_SIMULATION_STATE\n  );\n  const [nodes, setNodes] = useState(INITIAL_GRAPH.nodes);\n  const [edges, setEdges] = useState(INITIAL_GRAPH.edges);\n  const [historicalSickCount, setHistoricalSickCount] = useState([]);\n  const [historicalRecoveredCount, setHistoricalRecoveredCount] = useState([]);\n  const [historicalDeadCount, setHistoricalDeadCount] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const graphRef = useRef(null);\n\n  useInterval(() => {\n    if (loading) {\n      return;\n    }\n\n    const { nodes: _nodes, edges: _edges, state } = nextSimulationTick(\n      simulationState,\n      nodes,\n      edges\n    );\n\n    setSimulationState(state);\n\n    setHistoricalSickCount(\n      historicalSickCount.concat(\n        nodes.filter(({ state }) => state === SICK).length\n      )\n    );\n\n    setHistoricalRecoveredCount(\n      historicalRecoveredCount.concat(\n        nodes.filter(({ state }) => state === RECOVERED).length\n      )\n    );\n\n    setHistoricalDeadCount(\n      historicalDeadCount.concat(\n        nodes.filter(({ state }) => state === DEAD).length\n      )\n    );\n  }, 1000);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [loading]);\n\n  const onNodeClick = (nodeId) => {\n    return () => {\n      const node = nodes.find(({ id }) => nodeId === id);\n      if (node.type !== \"venue\") {\n        return;\n      }\n      node.locked = !node.locked;\n    };\n  };\n\n  const onSettingChange = (key) => (event) => {\n    setSimulationState({ ...simulationState, [key]: event.target.value });\n  };\n\n  const onRestartButtonClick = () => {\n    const { nodes, edges } = getInitialGraph(simulationState);\n    setLoading(true);\n    setNodes(nodes);\n    setEdges(edges);\n    setHistoricalDeadCount([]);\n    setHistoricalRecoveredCount([]);\n    setHistoricalSickCount([]);\n    setSimulationState({ ...simulationState, tick: 0 });\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.header}>\n        <h3>CoronaSim: Simulating Coronavirus Escalation with the Application of SIR Modeling</h3>\n        <h2>A virtualized experiment to analyze the spread of a pathogen over a modeled community</h2>\n      </div>\n      <div className={styles.simulation}>\n        <div className={styles.samples}>\n          <span className={styles.sampleSusceptible}>Susceptible</span>\n          <span className={styles.sampleInfected}>Infected</span>\n          <span className={styles.sampleRecovered}>Recovered</span>\n          <i>Click on a building to qurantine</i>\n        </div>\n        {!loading && (\n          <Graph\n            width={\n              Math.round(\n                nodes.filter(({ type }) => type === \"venue\").length / 6\n              ) * 110\n            }\n            height={700}\n            tick={simulationState.tick}\n            nodes={nodes}\n            edges={edges}\n            onNodeClick={onNodeClick}\n            ref={graphRef}\n          />\n        )}\n      </div>\n      <div className={styles.section}>\n        <div className={styles.stats}>\n          <h3>Stats</h3>\n          <div className={styles.population}>\n            Population: {nodes.filter(({ type }) => type === \"agent\").length}{\" \"}\n            <br />\n            Dead: {nodes.filter(({ state }) => state === DEAD).length} <br />\n            Recovered: {\n              nodes.filter(({ state }) => state === RECOVERED).length\n            }{\" \"}\n            <br />\n            Sick: {nodes.filter(({ state }) => state === SICK).length} <br />\n          </div>\n          <LineChart\n            width={300}\n            height={270}\n            data={[\n              { color: \"red\", points: historicalSickCount },\n              { color: \"green\", points: historicalRecoveredCount },\n              { color: \"black\", points: historicalDeadCount },\n            ]}\n          />\n        </div>\n        <div className={styles.simulationSettings}>\n          <h3>Settings</h3>\n          <SimulationSettings\n            simulationState={simulationState}\n            onSettingChange={onSettingChange}\n            onRestartButtonClick={onRestartButtonClick}\n          />\n        </div>\n\n      </div>\n      <div className={styles.pageInfo}>\n        <div className={styles.section}>\n          <h1>Docs</h1>\n          <p>These elements are modifiable by the user to further specify circumstanital conditions: </p>\n          <ul>\n            <li>\n                Initial sick agents: number of intial sick people (randomly dispersed through homes)\n            </li>\n            <br/>\n            <li>\n                Agents per building: number of people per home\n            </li>\n            <br/>\n            <li>\n                Houses: number of houses\n            </li>\n            <br/>\n            <li>\n                Bus stations: number of bus stations\n            </li>\n            <br/>\n            <li>\n                Hospitals: number of hospitals\n            </li>\n            <br/>\n            <li>\n                Supermarkets: number of supermarkets\n            </li>\n            <br/>\n            <li>\n                Schools: number of schools\n            </li>\n          </ul>\n          <h2>Regions</h2>\n          <p>\n            Each region has distinctive characteristics extracted from the region's respective Demographic Transition Model (DTM). Elements are scaled logarithimically for simulation and SIR modeling while factoring modified user input.\n          </p>\n          <ul>\n            <li>\n              <a href=\"/react-coronasim/na/\">\n                North America (NA)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/sa/\">\n                South America (SA)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/eu/\">\n                Europe (EU)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/as/\">\n                Asia (AS)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/af/\">\n                Africa (AF)\n              </a>\n            </li>\n            <li>\n              <a href=\"/react-coronasim/oc/\">\n                Oceania (OC)\n              </a>\n            </li>\n          </ul>\n          <br/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"simulationContainer\":\"App_simulationContainer__23iFm\",\"simulation\":\"App_simulation__1Y9Gr\",\"section\":\"App_section__1OL6S\",\"simulationSettings\":\"App_simulationSettings__txA-R\",\"stats\":\"App_stats__2fMs7\",\"population\":\"App_population__3MVPW\",\"simulationInfo\":\"App_simulationInfo__1KRFk\",\"pageInfo\":\"App_pageInfo__2E9cf\",\"samples\":\"App_samples__2e7V-\",\"sampleSusceptible\":\"App_sampleSusceptible__2olEO\",\"sampleInfected\":\"App_sampleInfected__1l1Pi\",\"sampleRecovered\":\"App_sampleRecovered__33NzV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SimulationSettings_container__vY4rL\",\"form\":\"SimulationSettings_form__E6YUW\",\"value\":\"SimulationSettings_value__1sPd7\",\"footer\":\"SimulationSettings_footer__1GRqa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"node\":\"Graph_node__2LUmU\",\"venue\":\"Graph_venue__1yeeL\",\"hospital\":\"Graph_hospital__2-HM5\",\"teatr\":\"Graph_teatr__3zcOH\",\"station\":\"Graph_station__3oWAU\",\"supermarket\":\"Graph_supermarket__x5o1m\",\"susceptible\":\"Graph_susceptible__2UC5Q\",\"dead\":\"Graph_dead__aGtk-\",\"sick\":\"Graph_sick__2ig0f\",\"recovered\":\"Graph_recovered__3crc2\",\"lockedSymbol\":\"Graph_lockedSymbol__1OEeZ\"};"],"sourceRoot":""}